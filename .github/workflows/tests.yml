name: tests
permissions:
  contents: read
  checks: read
  issues: write       # for guardrails comments (already used)
  pull-requests: write
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  smokes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GUARDRAILS_ARTIFACT_NAME: guardrails-report-smokes
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: false
      - name: Record job start
        id: record_start
        run: echo "JOB_START_TS=$(date +%s)" >> "$GITHUB_ENV"
      - name: Safe git (guarded)
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --local --unset-all extensions.worktreeConfig || true
          echo "Git safety configured; no submodule operations"
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable Corepack + pin Yarn 4.9.2
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version
      - name: Cache Yarn Berry artifacts
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/patches
            .yarn/build-state.yml
            .pnp.cjs
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps (immutable)
        run: yarn install --immutable
      - name: Cache Hardhat artifacts
        uses: actions/cache@v4
        with:
          path: |
            cache
            artifacts
            typechain
          key: ${{ runner.os }}-hardhat-${{ hashFiles('hardhat.config.ts') }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-hardhat-
      - name: Guardrails v2 scan (non-blocking)
        run: bash scripts/guardrails/scan.sh || true
        shell: bash
      - name: Upload guardrails report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: guardrails-report-smokes
          path: guardrails-report.txt
          if-no-files-found: ignore
          retention-days: 7
      - name: Guardrails — PR auto-comment + label (non-blocking)
        if: ${{ always() && github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ARTIFACT_NAME: ${{ env.GUARDRAILS_ARTIFACT_NAME }}
        run: |
          set -euo pipefail
          # pull counts from report
          REPORT="guardrails-report.txt"
          if [ -f "$REPORT" ]; then
            raw_time=$(rg -n "Raw EVM time ops" -n $REPORT | wc -l | xargs); : # count lines section header present
          fi

          # Robust parse: grab counts by header lines we print in scan.sh
          counts=$(grep -E "count\(" -n "$REPORT" | sed 's/.*count(\(.*\)).*/\1/' || true)
          # extract specific counts; default 0
          c_time=$(grep -E "^Raw EVM time ops:" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_ray=$(grep -E "^Legacy RAY math:" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_only=$(grep -E "^Mocha .only markers:" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_console=$(grep -E "^console.log in tests:" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_addr=$(grep -E "^Hardcoded 0x addresses" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_todo=$(grep -E "^TODO/FIXME markers" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_hhconsole=$(grep -E "^hardhat/console imports" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_only_bk=$(grep -E "^mocha only markers \(backup\)" "$REPORT" | awk '{print $NF+0}' || echo 0)

          total=$((c_time+c_ray+c_only+c_console+c_addr+c_todo+c_hhconsole+c_only_bk))

          # severity emoji (highest hit wins)
          sev="🟢"
          [ "$c_time" -gt 0 ] && sev="🔴"
          if [ "$sev" = "🟢" ]; then
            ([ "$c_only" -gt 0 ] || [ "$c_only_bk" -gt 0 ]) && sev="🟡"
          fi

          pr="${{ github.event.pull_request.number }}"
          marker="[guardrails-report:${{ github.run_id }}:${{ job.name }}]"
          body="$sev Guardrails summary for **${{ job.name }}** $marker
          - Raw EVM time ops: $c_time
          - Legacy RAY math: $c_ray
          - .only markers: $((c_only+c_only_bk))
          - console.log (tests): $c_console
          - hardcoded 0x addrs: $c_addr
          - TODO/FIXME: $c_todo
          - hardhat/console imports: $c_hhconsole
          
          Run: $RUN_URL  
          Artifact: **$ARTIFACT_NAME**"

          # de-dup: skip if same marker already exists
          if gh pr view "$pr" --json comments --jq '.comments[].body' | grep -qF "$marker"; then
            echo "Guardrails comment already posted (marker seen)."
          else
            # add label if hits > 0
            if [ "$total" -gt 0 ]; then
              gh pr edit "$pr" --add-label "ci/guardrails" || true
            fi
            gh pr comment "$pr" --body "$body" || true
          fi
      - name: Run fast smokes
        env:
          PRICING_PROVIDER: stub
          BANK_DATA_MODE: off
          CI_SMOKES_ONLY: "1"
        run: |
          yarn hardhat test test/security/precision.spec.ts --grep SMOKE
          yarn hardhat test test/security/reentrancy.spec.ts --grep SMOKE
          # Include redemption smoke only in the smokes lane
          yarn hardhat test test/nav.redemption.simple.spec.ts --grep "SMOKE"
      - name: Append timing CSV
        if: always()
        shell: bash
        run: |
          NOW=$(date +%s)
          : "${JOB_START_TS:=0}"
          if [ "$JOB_START_TS" -eq 0 ]; then
            echo "WARN: JOB_START_TS missing; setting duration=0" >&2
            DURATION=0
          else
            DURATION=$(( NOW - JOB_START_TS ))
          fi
          CACHE_HIT="${{ steps.cache-yarn.outputs.cache-hit || 'false' }}"
          TS_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          JOB_NAME="${{ github.job }}"
          echo "${TS_ISO},${JOB_NAME},${DURATION},${CACHE_HIT}" >> ci-timings.txt
          if [ $DURATION -gt 120 ]; then
            echo "⚠️ Budget warning: smokes job took ${DURATION}s (threshold: 120s)" | tee -a $GITHUB_STEP_SUMMARY
          fi
      - name: Upload timing data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-timings-smokes
          path: ci-timings.txt
          if-no-files-found: ignore
          retention-days: 30

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GUARDRAILS_ARTIFACT_NAME: guardrails-report-test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: false
      - name: Record job start
        id: record_start
        run: echo "JOB_START_TS=$(date +%s)" >> "$GITHUB_ENV"
      # Assert no submodules and clean any cached submodule state
      - name: Assert no submodules
        run: |
          # Fail fast if someone reintroduces malformed submodules
          test ! -f .gitmodules || ! git config --file .gitmodules --name-only --get-regexp '^submodule\..*\.url' || (echo "ERROR: Malformed .gitmodules detected" && exit 1)
          # Clean any cached submodule state
          git config --local --remove-section submodule.frontend/brics-ui 2>/dev/null || true
          git config --local --remove-section submodule.frontend.brics-ui 2>/dev/null || true
          echo "Submodule state cleaned"
      # Guarded safety step; do NOT touch submodules
      - name: Safe git (guarded)
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --local --unset-all extensions.worktreeConfig || true
          echo "Git safety configured; no submodule operations"
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable Corepack + pin Yarn 4.9.2
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version
      - name: Cache Yarn Berry artifacts
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/patches
            .yarn/build-state.yml
            .pnp.cjs
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps (immutable)
        run: yarn install --immutable
      - name: Cache Hardhat artifacts
        uses: actions/cache@v4
        with:
          path: |
            cache
            artifacts
            typechain
          key: ${{ runner.os }}-hardhat-${{ hashFiles('hardhat.config.ts') }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-hardhat-
      - name: Guardrails v2 scan (non-blocking)
        run: bash scripts/guardrails/scan.sh || true
        shell: bash
      - name: Upload guardrails report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: guardrails-report-test
          path: guardrails-report.txt
          if-no-files-found: ignore
          retention-days: 7
      - name: Guardrails — PR auto-comment + label (non-blocking)
        if: ${{ always() && github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ARTIFACT_NAME: ${{ env.GUARDRAILS_ARTIFACT_NAME }}
        run: |
          set -euo pipefail
          # pull counts from report
          REPORT="guardrails-report.txt"
          if [ -f "$REPORT" ]; then
            raw_time=$(rg -n "Raw EVM time ops" -n $REPORT | wc -l | xargs); : # count lines section header present
          fi

          # Robust parse: grab counts by header lines we print in scan.sh
          counts=$(grep -E "count\(" -n "$REPORT" | sed 's/.*count(\(.*\)).*/\1/' || true)
          # extract specific counts; default 0
          c_time=$(grep -E "^Raw EVM time ops:" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_ray=$(grep -E "^Legacy RAY math:" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_only=$(grep -E "^Mocha .only markers:" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_console=$(grep -E "^console.log in tests:" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_addr=$(grep -E "^Hardcoded 0x addresses" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_todo=$(grep -E "^TODO/FIXME markers" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_hhconsole=$(grep -E "^hardhat/console imports" "$REPORT" | awk '{print $NF+0}' || echo 0)
          c_only_bk=$(grep -E "^mocha only markers \(backup\)" "$REPORT" | awk '{print $NF+0}' || echo 0)

          total=$((c_time+c_ray+c_only+c_console+c_addr+c_todo+c_hhconsole+c_only_bk))

          # severity emoji (highest hit wins)
          sev="🟢"
          [ "$c_time" -gt 0 ] && sev="🔴"
          if [ "$sev" = "🟢" ]; then
            ([ "$c_only" -gt 0 ] || [ "$c_only_bk" -gt 0 ]) && sev="🟡"
          fi

          pr="${{ github.event.pull_request.number }}"
          marker="[guardrails-report:${{ github.run_id }}:${{ job.name }}]"
          body="$sev Guardrails summary for **${{ job.name }}** $marker
          - Raw EVM time ops: $c_time
          - Legacy RAY math: $c_ray
          - .only markers: $((c_only+c_only_bk))
          - console.log (tests): $c_console
          - hardcoded 0x addrs: $c_addr
          - TODO/FIXME: $c_todo
          - hardhat/console imports: $c_hhconsole
          
          Run: $RUN_URL  
          Artifact: **$ARTIFACT_NAME**"

          # de-dup: skip if same marker already exists
          if gh pr view "$pr" --json comments --jq '.comments[].body' | grep -qF "$marker"; then
            echo "Guardrails comment already posted (marker seen)."
          else
            # add label if hits > 0
            if [ "$total" -gt 0 ]; then
              gh pr edit "$pr" --add-label "ci/guardrails" || true
            fi
            gh pr comment "$pr" --body "$body" || true
          fi
      - name: Guardrails (tests)
        run: bash scripts/check-usdc-ether.sh
      - name: Run tests
        env:
          PRICING_PROVIDER: stub
          BANK_DATA_MODE: off
        run: yarn test
      - name: Append timing CSV
        if: always()
        shell: bash
        run: |
          NOW=$(date +%s)
          : "${JOB_START_TS:=0}"
          if [ "$JOB_START_TS" -eq 0 ]; then
            echo "WARN: JOB_START_TS missing; setting duration=0" >&2
            DURATION=0
          else
            DURATION=$(( NOW - JOB_START_TS ))
          fi
          CACHE_HIT="${{ steps.cache-yarn.outputs.cache-hit || 'false' }}"
          TS_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          JOB_NAME="${{ github.job }}"
          echo "${TS_ISO},${JOB_NAME},${DURATION},${CACHE_HIT}" >> ci-timings.txt
          if [ $DURATION -gt 180 ]; then
            echo "⚠️ Budget warning: test job took ${DURATION}s (threshold: 180s)" | tee -a $GITHUB_STEP_SUMMARY
          fi
      - name: Upload timing data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-timings-test
          path: ci-timings.txt
          if-no-files-found: ignore
          retention-days: 30
