name: tests
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  smokes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GUARDRAILS_ARTIFACT_NAME: guardrails-report-smokes
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: false
      - name: Safe git (guarded)
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --local --unset-all extensions.worktreeConfig || true
          echo "Git safety configured; no submodule operations"
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable Corepack + pin Yarn 4.9.2
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version
      - name: Cache Yarn Berry artifacts
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/patches
            .yarn/build-state.yml
            .pnp.cjs
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps (immutable)
        run: yarn install --immutable
      - name: Cache Hardhat artifacts
        uses: actions/cache@v4
        with:
          path: |
            cache
            artifacts
            typechain
          key: ${{ runner.os }}-hardhat-${{ hashFiles('hardhat.config.ts') }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-hardhat-
      - name: Guardrails v2 scan (non-blocking)
        run: bash scripts/guardrails/scan.sh || true
        shell: bash
      - name: Upload guardrails report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: guardrails-report-smokes
          path: guardrails-report.txt
          if-no-files-found: ignore
          retention-days: 7
      - name: Guardrails PR comment (non-blocking)
        if: ${{ always() && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'guardrails-report.txt';
            if (!fs.existsSync(path)) {
              core.info('No guardrails-report.txt found (skipping comment).');
              return;
            }
            const txt = fs.readFileSync(path, 'utf8');
            function count(sectionTitle) {
              const re = new RegExp(`^== ${sectionTitle} ==[\\s\\S]*?(?=^== |\\Z)`, 'm');
              const m = txt.match(re);
              if (!m) return 0;
              return m[0].split('\n').slice(1).filter(l => l.trim().length > 0).length;
            }
            const counts = {
              'raw time ops (evm_*)': count('raw time ops (evm_*)'),
              'legacy RAY math (parseEther(...) * 10n ** 9n)': count('legacy RAY math (parseEther(...) * 10n ** 9n)'),
              'focused tests (.only)': count('focused tests (.only)'),
              'console.log in tests': count('console.log in tests'),
              'hardcoded 0x addresses (excluding mocks/fixtures/json)': count('hardcoded 0x addresses (excluding mocks/fixtures/json)')
            };
            const total = Object.values(counts).reduce((a,b)=>a+b,0);
            core.info(`Guardrails counts: ${JSON.stringify(counts)}`);
            if (total === 0) return; // nothing to report
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const artifact = process.env.GUARDRAILS_ARTIFACT_NAME || 'guardrails-report';
            const lines = Object.entries(counts)
              .filter(([,c])=>c>0)
              .map(([k,c])=>`- ${k}: **${c}**`)
              .join('\n');
            const body = [
              '🛡️ **Guardrails findings**',
              '',
              lines,
              '',
              `Details: download artifact **${artifact}**`,
              `Run: ${runUrl}`
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
      - name: Run fast smokes
        env:
          PRICING_PROVIDER: stub
          BANK_DATA_MODE: off
          CI_SMOKES_ONLY: "1"
        run: |
          yarn hardhat test test/security/precision.spec.ts --grep SMOKE
          yarn hardhat test test/security/reentrancy.spec.ts --grep SMOKE
          # Include redemption smoke only in the smokes lane
          yarn hardhat test test/nav.redemption.simple.spec.ts --grep "SMOKE"

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GUARDRAILS_ARTIFACT_NAME: guardrails-report-test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: false
      # Assert no submodules and clean any cached submodule state
      - name: Assert no submodules
        run: |
          # Fail fast if someone reintroduces malformed submodules
          test ! -f .gitmodules || ! git config --file .gitmodules --name-only --get-regexp '^submodule\..*\.url' || (echo "ERROR: Malformed .gitmodules detected" && exit 1)
          # Clean any cached submodule state
          git config --local --remove-section submodule.frontend/brics-ui 2>/dev/null || true
          git config --local --remove-section submodule.frontend.brics-ui 2>/dev/null || true
          echo "Submodule state cleaned"
      # Guarded safety step; do NOT touch submodules
      - name: Safe git (guarded)
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --local --unset-all extensions.worktreeConfig || true
          echo "Git safety configured; no submodule operations"
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable Corepack + pin Yarn 4.9.2
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version
      - name: Cache Yarn Berry artifacts
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/patches
            .yarn/build-state.yml
            .pnp.cjs
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps (immutable)
        run: yarn install --immutable
      - name: Cache Hardhat artifacts
        uses: actions/cache@v4
        with:
          path: |
            cache
            artifacts
            typechain
          key: ${{ runner.os }}-hardhat-${{ hashFiles('hardhat.config.ts') }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-hardhat-
      - name: Guardrails v2 scan (non-blocking)
        run: bash scripts/guardrails/scan.sh || true
        shell: bash
      - name: Upload guardrails report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: guardrails-report-test
          path: guardrails-report.txt
          if-no-files-found: ignore
          retention-days: 7
      - name: Guardrails PR comment (non-blocking)
        if: ${{ always() && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'guardrails-report.txt';
            if (!fs.existsSync(path)) {
              core.info('No guardrails-report.txt found (skipping comment).');
              return;
            }
            const txt = fs.readFileSync(path, 'utf8');
            function count(sectionTitle) {
              const re = new RegExp(`^== ${sectionTitle} ==[\\s\\S]*?(?=^== |\\Z)`, 'm');
              const m = txt.match(re);
              if (!m) return 0;
              return m[0].split('\n').slice(1).filter(l => l.trim().length > 0).length;
            }
            const counts = {
              'raw time ops (evm_*)': count('raw time ops (evm_*)'),
              'legacy RAY math (parseEther(...) * 10n ** 9n)': count('legacy RAY math (parseEther(...) * 10n ** 9n)'),
              'focused tests (.only)': count('focused tests (.only)'),
              'console.log in tests': count('console.log in tests'),
              'hardcoded 0x addresses (excluding mocks/fixtures/json)': count('hardcoded 0x addresses (excluding mocks/fixtures/json)')
            };
            const total = Object.values(counts).reduce((a,b)=>a+b,0);
            core.info(`Guardrails counts: ${JSON.stringify(counts)}`);
            if (total === 0) return; // nothing to report
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const artifact = process.env.GUARDRAILS_ARTIFACT_NAME || 'guardrails-report';
            const lines = Object.entries(counts)
              .filter(([,c])=>c>0)
              .map(([k,c])=>`- ${k}: **${c}**`)
              .join('\n');
            const body = [
              '🛡️ **Guardrails findings**',
              '',
              lines,
              '',
              `Details: download artifact **${artifact}**`,
              `Run: ${runUrl}`
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
      - name: Guardrails (tests)
        run: bash scripts/check-usdc-ether.sh
      - name: Run tests
        env:
          PRICING_PROVIDER: stub
          BANK_DATA_MODE: off
        run: yarn test
