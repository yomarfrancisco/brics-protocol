name: ci

on:
  push:
    branches: [ main, release/** ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: "20.19.x"
  SOLC_VERSION: "0.8.24"
  CI: true

jobs:
  tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HARDHAT_NETWORK: hardhat
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-tests

      - name: Enable corepack & install
        run: |
          corepack enable
          yarn -v
          yarn install --immutable
      - run: yarn test

      # Artifacts (tests don't always have files, but keep a pattern)
      - name: Upload gas report (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gas-report_${{ github.sha }}
          path: gas-report.txt
          retention-days: 14

  coverage-fast:
    name: Coverage (fast track)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      COVERAGE: "1"
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-coverage-fast

      - name: Enable corepack & install
        run: |
          corepack enable
          yarn -v
          yarn install --immutable
      - name: Run coverage
        run: env -u HARDHAT_NETWORK yarn coverage || true
        env:
          CI: true

      - name: Enforce coverage floor
        run: |
          FAST_FLOOR=$(node -pe "require('./ci/coverage-baseline.json').fast_floor")
          bash scripts/check-coverage.sh "$FAST_FLOOR"

      - name: Upload coverage summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-fast_${{ github.event_name }}_${{ github.sha }}
          path: |
            coverage/lcov.info
            coverage.json
          retention-days: 14

      - name: Post PR Comment (coverage + gas)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx ts-node scripts/pr-comment.ts || echo "PR comment skipped"

  invariants-smoke:
    name: Invariants Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-invariants

      - name: Enable corepack & install
        run: |
          corepack enable
          yarn -v
          yarn install --immutable

      - name: Create minimal deployment fixture
        run: |
          mkdir -p deployment
          cat > deployment/localhost.addresses.json << 'EOF'
          {
            "issuance": {
              "IssuanceControllerV3": "0x1234567890123456789012345678901234567890"
            },
            "tranche": {
              "BRICSToken": "0x2345678901234567890123456789012345678901",
              "TrancheManagerV2": "0x3456789012345678901234567890123456789012"
            },
            "core": {
              "ConfigRegistry": "0x4567890123456789012345678901234567890123"
            },
            "oracle": {
              "NAVOracleV3": "0x5678901234567890123456789012345678901234"
            },
            "finance": {
              "Treasury": "0x6789012345678901234567890123456789012345",
              "PreTrancheBuffer": "0x7890123456789012345678901234567890123456"
            }
          }
          EOF

      - name: Run invariants test
        run: yarn test --grep "Invariants"

  pricing-lint-test:
    name: Pricing Service (Lint + Test)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true # Set to true initially as per user request
    env:
      MODEL_JITTER_BPS_OVERRIDE: "0"
      SEED: ""
    defaults:
      run:
        working-directory: services/pricing
    steps:
      - uses: actions/checkout@v4
      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            services/pricing/.venv
          key: ${{ runner.os }}-python-3.11-${{ hashFiles('services/pricing/requirements.txt') }}
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
      - name: Run tests
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. pytest tests/ -v
      - name: Run CLI smoke test
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. python -m services.pricing.cli price --obligor TEST001 --tenor 365 --asof 1700000000 --notional 1000000
          PYTHONPATH=../.. python -m services.pricing.cli score --obligor TEST001 --tenor 365 --asof 1700000000
      - name: Generate Golden Vector A output
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. python -m services.pricing.cli price \
            --obligor ACME-LLC \
            --tenor 365 \
            --asof 1726000000 \
            --notional 1000000 \
            --features '{"size":1.2,"leverage":0.5,"volatility":0.3,"fxExposure":0.1,"countryRisk":0.2,"industryStress":0.4,"collateralQuality":0.7,"dataQuality":0.8,"modelShift":0.1}' \
            --json-only > pricing_sample.json
      - name: Verify signer parity
        run: |
          source .venv/bin/activate
          cd ../..
          PYTHONPATH=. python -c "
          from services.pricing.signing import recover
          from eth_utils import to_bytes
          import json
          
          # Load Golden Vector A output
          with open('services/pricing/pricing_sample.json', 'r') as f:
              data = json.load(f)
          
          digest_hex = data['digest']
          signature = data['signature']
          expected_signer = '0xae3DfFEE97f92db0201d11CB8877C89738353bCE'
          
          # Recover signer
          digest_bytes = bytes.fromhex(digest_hex[2:])
          recovered_signer = recover(digest_bytes, signature)
          
          print(f'Expected: {expected_signer}')
          print(f'Recovered: {recovered_signer}')
          print(f'Parity: {recovered_signer == expected_signer}')
          
          # Write parity result
          with open('services/pricing/parity.txt', 'w') as f:
              f.write(f'recovered == RISK_ORACLE_ADDRESS: {recovered_signer == expected_signer}')
          "
      - name: Upload pricing artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pricing_artifacts_${{ github.sha }}
          path: |
            services/pricing/pricing_sample.json
            services/pricing/parity.txt
            services/pricing/tests/sample_request.json
            services/pricing/cli.py
            services/pricing/baseline_model.py
          retention-days: 14

  compliance-lint-test:
    name: Compliance Service (Lint + Test)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true # Set to true initially as per user request
    env:
      SEED: ""
    defaults:
      run:
        working-directory: services/compliance
    steps:
      - uses: actions/checkout@v4
      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            services/compliance/.venv
          key: ${{ runner.os }}-python-3.11-${{ hashFiles('services/compliance/requirements.txt') }}
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
      - name: Run tests
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. pytest tests/ -v
      - name: Run CLI smoke test
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. python -m services.compliance.cli kyc --subject TEST001 --json-only
          PYTHONPATH=../.. python -m services.compliance.cli aml --subject TEST001 --json-only
      - name: Generate Golden Vector outputs
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. python -m services.compliance.cli kyc \
            --subject ALPHA-001 \
            --name "John Doe" \
            --dob "1990-01-01" \
            --doc-type passport \
            --doc-last4 1234 \
            --json-only > kyc_sample.json
          PYTHONPATH=../.. python -m services.compliance.cli aml \
            --subject ALPHA-001 \
            --json-only > aml_sample.json
      - name: Upload compliance artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance_artifacts_${{ github.sha }}
          path: |
            services/compliance/kyc_sample.json
            services/compliance/aml_sample.json
            services/compliance/cli.py
            services/compliance/app.py
          retention-days: 14

  gas-report:
    name: Gas Report
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      HARDHAT_NETWORK: hardhat
      REPORT_GAS: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-gas

      - name: Enable corepack & install
        run: |
          corepack enable
          yarn -v
          yarn install --immutable
      - run: yarn gas

      - name: Upload gas report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gas-report_${{ github.event_name }}_${{ github.sha }}
          path: gas-report.txt
          retention-days: 14

  slither-security:
    name: Security (Slither + SARIF)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SOLC_VERSION: "0.8.24"
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-security

      - name: Install dependencies
        run: |
          corepack enable
          yarn -v
          yarn install --immutable

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Slither & solc-select
        run: |
          pip install "slither-analyzer==0.10.3" solc-select
          solc-select install ${SOLC_VERSION}
          solc-select use ${SOLC_VERSION}

      - name: Run Slither (SARIF + md + json)
        run: |
          mkdir -p audit
          # Raw SARIF + convenience reports
          slither . --solc-remaps "@=node_modules/" \
            --sarif slither.sarif \
            --markdown audit/slither-report.md \
            --json audit/slither.json || true
          # We let it continue; we'll enforce via filtered SARIF

      - name: Filter SARIF via allowlist
        run: |
          node scripts/slither-filter.js audit/slither-allowlist.json slither.sarif slither.filtered.sarif

      - name: Check allowlist growth
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          node scripts/allowlist-guard.js

      - name: Fail on non-allowlisted high findings
        run: |
          node -e "const fs=require('fs');const s=JSON.parse(fs.readFileSync('slither.filtered.sarif','utf8'));const run=s.runs?.[0]||{};const rules={};(run.tool?.driver?.rules||[]).forEach(r=>rules[r.id]=r);const highs=(run.results||[]).filter(r=>{const lvl=r.level||rules[r.ruleId]?.defaultConfiguration?.level||'';const sev=(rules[r.ruleId]?.properties?.severity||'').toLowerCase();return lvl==='error'||sev==='high';});if(highs.length){console.error('High findings (filtered):', highs.length); process.exit(1);} console.log('No high findings after allowlist ✅');"

      - name: Upload SARIF to GitHub Security
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: slither.sarif

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: slither_${{ github.event_name }}_${{ github.sha }}
          path: |
            audit/slither.json
            audit/slither-report.md
            slither.sarif
            slither.filtered.sarif
          if-no-files-found: warn
          retention-days: 14

  swap-e2e-replay:
    name: Swap E2E (Replay)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Enable corepack & install
        run: |
          corepack enable
          yarn -v
          yarn install --immutable
      - name: Generate replay fixture
        run: yarn fixtures:gen
      - name: Run replay E2E (no HTTP, no bank)
        env:
          PRICING_PROVIDER: replay
          PRICING_FIXTURES_DIR: pricing-fixtures
        run: yarn test --grep "E2E \\(replay\\)"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: swap-replay-fixtures
          path: pricing-fixtures/*.json
