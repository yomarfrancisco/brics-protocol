{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "informationUri": "https://github.com/crytic/slither",
          "version": "0.11.3",
          "rules": [
            {
              "id": "0-1-incorrect-exp",
              "name": "incorrect-exp",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Incorrect exponentiation"
              },
              "help": {
                "text": "Use the correct operator `**` for exponentiation."
              }
            },
            {
              "id": "1-1-divide-before-multiply",
              "name": "divide-before-multiply",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Divide before multiply"
              },
              "help": {
                "text": "Consider ordering multiplication before division."
              }
            },
            {
              "id": "1-1-reentrancy-no-eth",
              "name": "reentrancy-no-eth",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "1-1-uninitialized-local",
              "name": "uninitialized-local",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Uninitialized local variables"
              },
              "help": {
                "text": "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability."
              }
            },
            {
              "id": "1-1-unused-return",
              "name": "unused-return",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unused return"
              },
              "help": {
                "text": "Ensure that all the return values of the function calls are used."
              }
            },
            {
              "id": "2-0-shadowing-local",
              "name": "shadowing-local",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Local variable shadowing"
              },
              "help": {
                "text": "Rename the local variables that shadow another component."
              }
            },
            {
              "id": "2-1-missing-zero-check",
              "name": "missing-zero-check",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Missing zero address validation"
              },
              "help": {
                "text": "Check that the address is not zero."
              }
            },
            {
              "id": "2-1-calls-loop",
              "name": "calls-loop",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Calls inside a loop"
              },
              "help": {
                "text": "Favor [pull over push](https://github.com/ethereum/wiki/wiki/Safety#favor-pull-over-push-for-external-calls) strategy for external calls."
              }
            },
            {
              "id": "2-1-reentrancy-benign",
              "name": "reentrancy-benign",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-reentrancy-events",
              "name": "reentrancy-events",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](https://docs.soliditylang.org/en/latest/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-timestamp",
              "name": "timestamp",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Block timestamp"
              },
              "help": {
                "text": "Avoid relying on `block.timestamp`."
              }
            },
            {
              "id": "3-0-assembly",
              "name": "assembly",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Assembly usage"
              },
              "help": {
                "text": "Do not use `evm` assembly."
              }
            },
            {
              "id": "3-0-pragma",
              "name": "pragma",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Different pragma directives are used"
              },
              "help": {
                "text": "Use one Solidity version."
              }
            },
            {
              "id": "3-0-cyclomatic-complexity",
              "name": "cyclomatic-complexity",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Cyclomatic complexity"
              },
              "help": {
                "text": "Reduce cyclomatic complexity by splitting the function into several smaller subroutines."
              }
            },
            {
              "id": "3-0-solc-version",
              "name": "solc-version",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Incorrect versions of Solidity"
              },
              "help": {
                "text": "\nDeploy with a recent version of Solidity (at least 0.8.0) with no known severe issues.\n\nUse a simple pragma version that allows any of these versions.\nConsider using the latest version of Solidity for testing."
              }
            },
            {
              "id": "3-0-low-level-calls",
              "name": "low-level-calls",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Low-level calls"
              },
              "help": {
                "text": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence."
              }
            },
            {
              "id": "3-0-naming-convention",
              "name": "naming-convention",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Conformance to Solidity naming conventions"
              },
              "help": {
                "text": "Follow the Solidity [naming convention](https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions)."
              }
            },
            {
              "id": "3-1-too-many-digits",
              "name": "too-many-digits",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Too many digits"
              },
              "help": {
                "text": "\nUse:\n- [Ether suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#ether-units),\n- [Time suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#time-units), or\n- [The scientific notation](https://solidity.readthedocs.io/en/latest/types.html#rational-and-integer-literals)\n"
              }
            },
            {
              "id": "4-0-cache-array-length",
              "name": "cache-array-length",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Cache array length"
              },
              "help": {
                "text": "Cache the lengths of storage arrays if they are used and not modified in `for` loops."
              }
            },
            {
              "id": "4-0-constable-states",
              "name": "constable-states",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "State variables that could be declared constant"
              },
              "help": {
                "text": "Add the `constant` attribute to state variables that never change."
              }
            },
            {
              "id": "4-0-immutable-states",
              "name": "immutable-states",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "State variables that could be declared immutable"
              },
              "help": {
                "text": "Add the `immutable` attribute to state variables that never change or are set only in the constructor."
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "0-1-incorrect-exp",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#257)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - [inverse = (3 * denominator) ^ 2](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L257)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d936ce201916582dc2961cee4ed7729f33d7e5e2f4c54e08aaf3d1ed886f21a"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "NAVOracleV3._degradedBase() (contracts/NAVOracleV3.sol#222-237) performs a multiplication on the result of a division:\n\t- hoursElapsed = (block.timestamp - lastKnownGoodTs) / 3600 (contracts/NAVOracleV3.sol#225)\n\t- growth = (lastKnownGoodNav * maxDailyGrowthBps * hoursElapsed) / (10000 * 24) (contracts/NAVOracleV3.sol#227)\n",
            "markdown": "[NAVOracleV3._degradedBase()](contracts/NAVOracleV3.sol#L222-L237) performs a multiplication on the result of a division:\n\t- [hoursElapsed = (block.timestamp - lastKnownGoodTs) / 3600](contracts/NAVOracleV3.sol#L225)\n\t- [growth = (lastKnownGoodNav * maxDailyGrowthBps * hoursElapsed) / (10000 * 24)](contracts/NAVOracleV3.sol#L227)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 237
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0bdd6e8d6b534356b0f243f5d0fed3e715ecdd9306e16adf9724b7175ac6b5be"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "IssuanceControllerV3.canIssue(uint256,uint256,uint256,bytes32) (contracts/IssuanceControllerV3.sol#666-701) performs a multiplication on the result of a division:\n\t- tokensOut = (usdcAmt * 1e27) / nav (contracts/IssuanceControllerV3.sol#686-688)\n\t- adjustedTokensOut = (tokensOut * params.maxIssuanceRateBps) / 10000 (contracts/IssuanceControllerV3.sol#688-689)\n",
            "markdown": "[IssuanceControllerV3.canIssue(uint256,uint256,uint256,bytes32)](contracts/IssuanceControllerV3.sol#L666-L701) performs a multiplication on the result of a division:\n\t- [tokensOut = (usdcAmt * 1e27) / nav](contracts/IssuanceControllerV3.sol#L686-L688)\n\t- [adjustedTokensOut = (tokensOut * params.maxIssuanceRateBps) / 10000](contracts/IssuanceControllerV3.sol#L688-L689)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 666,
                  "endLine": 701
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2fabb3d400c2b790707664ae025fce2f5301d5b4b41fca5e89251c73d6c2f5d9"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#265)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L265)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3d48e88a78e6c2ea76ea46494733ec31da351636c3208631f9ab09d6ec7bad6e"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#261)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L261)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4aeacef08ff359131ba81eb4ef200bd41b2c46a241e71099f370b99d0fc83623"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#264)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L264)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4cb35ca2c0908489e42a2323d54743d20f672fa6e76e6ce78a045382ba3ad786"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#266)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L266)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60ad34e4eeaf9be8431735326a047c2e4f456879271036cbffc3479b329b7c16"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.invMod(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#315-361) performs a multiplication on the result of a division:\n\t- quotient = gcd / remainder (node_modules/@openzeppelin/contracts/utils/math/Math.sol#337)\n\t- (gcd,remainder) = (remainder,gcd - remainder * quotient) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#339-346)\n",
            "markdown": "[Math.invMod(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L315-L361) performs a multiplication on the result of a division:\n\t- [quotient = gcd / remainder](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L337)\n\t- [(gcd,remainder) = (remainder,gcd - remainder * quotient)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L339-L346)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 361
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8942d09312126f44013988cc108ac45ba34577923cb67635312b8c71c04f4fe7"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes) (contracts/IssuanceControllerV3.sol#702-796) performs a multiplication on the result of a division:\n\t- out = (usdcAmt * 1e27) / nav (contracts/IssuanceControllerV3.sol#752)\n\t- out = (out * params.maxIssuanceRateBps) / 10000 (contracts/IssuanceControllerV3.sol#755)\n",
            "markdown": "[IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes)](contracts/IssuanceControllerV3.sol#L702-L796) performs a multiplication on the result of a division:\n\t- [out = (usdcAmt * 1e27) / nav](contracts/IssuanceControllerV3.sol#L752)\n\t- [out = (out * params.maxIssuanceRateBps) / 10000](contracts/IssuanceControllerV3.sol#L755)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 702,
                  "endLine": 796
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad56376d9e8ad167ac9ac6b9ea7a26af9a6bcd399c7f825172be4460e2d461d6"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "IssuanceControllerV3._calculateEffectiveCapacity(bytes32,uint256) (contracts/IssuanceControllerV3.sol#630-666) performs a multiplication on the result of a division:\n\t- dampedCapBps = baseEffectiveCap * (10000 - dampingFactor) / 10000 (contracts/IssuanceControllerV3.sol#662)\n\t- effectiveCap = (softCap * dampedCapBps) / 10000 (contracts/IssuanceControllerV3.sol#662-663)\n",
            "markdown": "[IssuanceControllerV3._calculateEffectiveCapacity(bytes32,uint256)](contracts/IssuanceControllerV3.sol#L630-L666) performs a multiplication on the result of a division:\n\t- [dampedCapBps = baseEffectiveCap * (10000 - dampingFactor) / 10000](contracts/IssuanceControllerV3.sol#L662)\n\t- [effectiveCap = (softCap * dampedCapBps) / 10000](contracts/IssuanceControllerV3.sol#L662-L663)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 630,
                  "endLine": 666
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bbe96f28ff43880c20568a657a7ef95bb82c9e99f37692b3c25efe30f4d36db1"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#262)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L262)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c441bddd6a4f9b67a2832342503f73b68a124a376c8a3703246526f3efba6261"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#257)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse = (3 * denominator) ^ 2](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L257)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbf56b3b7d31837c4f3943e7e8415e9bdbfbfd12e6233ab5aaef7bc041b1a8cb"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#242)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#263)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L242)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L263)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5bd28d0e83d49dc7bb8cfab1f39fb57d25a1bc4fa100e68e948ec895b2ff827"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) performs a multiplication on the result of a division:\n\t- low = low / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#245)\n\t- result = low * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#272)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) performs a multiplication on the result of a division:\n\t- [low = low / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L245)\n\t- [result = low * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L272)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5d38534b31e47c09beab2a0538b7455f1cadbe95c1ed3c895652ff6a78f0e87"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32) (contracts/IssuanceControllerV3.sol#798-871) performs a multiplication on the result of a division:\n\t- out = (usdcAmt * 1e27) / nav (contracts/IssuanceControllerV3.sol#826)\n\t- out = (out * params.maxIssuanceRateBps) / 10000 (contracts/IssuanceControllerV3.sol#829)\n",
            "markdown": "[IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32)](contracts/IssuanceControllerV3.sol#L798-L871) performs a multiplication on the result of a division:\n\t- [out = (usdcAmt * 1e27) / nav](contracts/IssuanceControllerV3.sol#L826)\n\t- [out = (out * params.maxIssuanceRateBps) / 10000](contracts/IssuanceControllerV3.sol#L829)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 798,
                  "endLine": 871
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ed21d42669203f00d13385238580378f5e96271e8e0e3010b50efb1203c942f4"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "IssuanceControllerV3._calculateEffectiveCapacity(bytes32,uint256) (contracts/IssuanceControllerV3.sol#638-670) performs a multiplication on the result of a division:\n\t- dampedCapBps = baseEffectiveCap * (10000 - dampingFactor) / 10000 (contracts/IssuanceControllerV3.sol#666)\n\t- effectiveCap = (softCap * dampedCapBps) / 10000 (contracts/IssuanceControllerV3.sol#667)\n",
            "markdown": "[IssuanceControllerV3._calculateEffectiveCapacity(bytes32,uint256)](contracts/IssuanceControllerV3.sol#L638-L670) performs a multiplication on the result of a division:\n\t- [dampedCapBps = baseEffectiveCap * (10000 - dampingFactor) / 10000](contracts/IssuanceControllerV3.sol#L666)\n\t- [effectiveCap = (softCap * dampedCapBps) / 10000](contracts/IssuanceControllerV3.sol#L667)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 638,
                  "endLine": 670
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "424957d25592bc7d0f3b1855431b5ed792e27658daa880ade6c940c180d242f3"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32) (contracts/IssuanceControllerV3.sol#807-879) performs a multiplication on the result of a division:\n\t- out = (usdcAmt * 1e27) / nav (contracts/IssuanceControllerV3.sol#832)\n\t- out = (out * params.maxIssuanceRateBps) / 10000 (contracts/IssuanceControllerV3.sol#836)\n",
            "markdown": "[IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32)](contracts/IssuanceControllerV3.sol#L807-L879) performs a multiplication on the result of a division:\n\t- [out = (usdcAmt * 1e27) / nav](contracts/IssuanceControllerV3.sol#L832)\n\t- [out = (out * params.maxIssuanceRateBps) / 10000](contracts/IssuanceControllerV3.sol#L836)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 807,
                  "endLine": 879
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "47d58448b6ad75f63be0249f650a1b172bc056032b4134d45e5fcf919f2010e9"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "IssuanceControllerV3.canIssue(uint256,uint256,uint256,bytes32) (contracts/IssuanceControllerV3.sol#672-708) performs a multiplication on the result of a division:\n\t- tokensOut = (usdcAmt * 1e27) / nav (contracts/IssuanceControllerV3.sol#694)\n\t- adjustedTokensOut = (tokensOut * params.maxIssuanceRateBps) / 10000 (contracts/IssuanceControllerV3.sol#695)\n",
            "markdown": "[IssuanceControllerV3.canIssue(uint256,uint256,uint256,bytes32)](contracts/IssuanceControllerV3.sol#L672-L708) performs a multiplication on the result of a division:\n\t- [tokensOut = (usdcAmt * 1e27) / nav](contracts/IssuanceControllerV3.sol#L694)\n\t- [adjustedTokensOut = (tokensOut * params.maxIssuanceRateBps) / 10000](contracts/IssuanceControllerV3.sol#L695)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 672,
                  "endLine": 708
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "491cb3475870387fe5da53f1fdb5b0ceaf69ae1d2afbc207fd4acfc9c24e12d6"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes) (contracts/IssuanceControllerV3.sol#711-804) performs a multiplication on the result of a division:\n\t- out = (usdcAmt * 1e27) / nav (contracts/IssuanceControllerV3.sol#758)\n\t- out = (out * params.maxIssuanceRateBps) / 10000 (contracts/IssuanceControllerV3.sol#762)\n",
            "markdown": "[IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes)](contracts/IssuanceControllerV3.sol#L711-L804) performs a multiplication on the result of a division:\n\t- [out = (usdcAmt * 1e27) / nav](contracts/IssuanceControllerV3.sol#L758)\n\t- [out = (out * params.maxIssuanceRateBps) / 10000](contracts/IssuanceControllerV3.sol#L762)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 711,
                  "endLine": 804
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab61876a5f44685e8a2c7525354f142d0465ab8e0106a3ee24944a116f949ee8"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497):\n\tExternal calls:\n\t- claimId = _mintClaimForUser(u,w.id,amt) (contracts/IssuanceControllerV3.sol#475)\n\t\t- claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#609-612)\n\tState variables written after the call(s):\n\t- pendingBy[u] = 0 (contracts/IssuanceControllerV3.sol#478)\n\tIssuanceControllerV3.pendingBy (contracts/IssuanceControllerV3.sol#108) can be used in cross function reentrancies:\n\t- IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497)\n\t- IssuanceControllerV3.pendingBy (contracts/IssuanceControllerV3.sol#108)\n\t- IssuanceControllerV3.pendingOf(address) (contracts/IssuanceControllerV3.sol#363-365)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497):\n\tExternal calls:\n\t- [claimId = _mintClaimForUser(u,w.id,amt)](contracts/IssuanceControllerV3.sol#L475)\n\t\t- [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L609-L612)\n\tState variables written after the call(s):\n\t- [pendingBy[u] = 0](contracts/IssuanceControllerV3.sol#L478)\n\t[IssuanceControllerV3.pendingBy](contracts/IssuanceControllerV3.sol#L108) can be used in cross function reentrancies:\n\t- [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497)\n\t- [IssuanceControllerV3.pendingBy](contracts/IssuanceControllerV3.sol#L108)\n\t- [IssuanceControllerV3.pendingOf(address)](contracts/IssuanceControllerV3.sol#L363-L365)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 460,
                  "endLine": 497
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "320f685a3d1936365e53ea6cadca9cada78f67c9d36bbe4e0ec134f91cef93b4"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.settleClaim(uint256,uint256,address) (contracts/IssuanceControllerV3.sol#515-568):\n\tExternal calls:\n\t- treasury.pay(holder,payAmt) (contracts/IssuanceControllerV3.sol#547)\n\t- _settleAndBurnClaim(claimId,holder) (contracts/IssuanceControllerV3.sol#553)\n\t\t- claims.settleAndBurn(claimId,holder) (contracts/IssuanceControllerV3.sol#619)\n\tState variables written after the call(s):\n\t- w.state = NavWindowState.SETTLED_FULL (contracts/IssuanceControllerV3.sol#561)\n\tIssuanceControllerV3.navWindows (contracts/IssuanceControllerV3.sol#107) can be used in cross function reentrancies:\n\t- IssuanceControllerV3.closeNavWindow() (contracts/IssuanceControllerV3.sol#394-401)\n\t- IssuanceControllerV3.currentNavWindow() (contracts/IssuanceControllerV3.sol#351-353)\n\t- IssuanceControllerV3.getWindowSummary(uint256) (contracts/IssuanceControllerV3.sol#304-326)\n\t- IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497)\n\t- IssuanceControllerV3.navWindows (contracts/IssuanceControllerV3.sol#107)\n\t- IssuanceControllerV3.nextCutoffTime() (contracts/IssuanceControllerV3.sol#355-361)\n\t- IssuanceControllerV3.openNavWindow(uint256) (contracts/IssuanceControllerV3.sol#376-392)\n\t- IssuanceControllerV3.strikeRedemption() (contracts/IssuanceControllerV3.sol#500-512)\n\t- w.state = NavWindowState.SETTLED_PARTIAL (contracts/IssuanceControllerV3.sol#564)\n\tIssuanceControllerV3.navWindows (contracts/IssuanceControllerV3.sol#107) can be used in cross function reentrancies:\n\t- IssuanceControllerV3.closeNavWindow() (contracts/IssuanceControllerV3.sol#394-401)\n\t- IssuanceControllerV3.currentNavWindow() (contracts/IssuanceControllerV3.sol#351-353)\n\t- IssuanceControllerV3.getWindowSummary(uint256) (contracts/IssuanceControllerV3.sol#304-326)\n\t- IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497)\n\t- IssuanceControllerV3.navWindows (contracts/IssuanceControllerV3.sol#107)\n\t- IssuanceControllerV3.nextCutoffTime() (contracts/IssuanceControllerV3.sol#355-361)\n\t- IssuanceControllerV3.openNavWindow(uint256) (contracts/IssuanceControllerV3.sol#376-392)\n\t- IssuanceControllerV3.strikeRedemption() (contracts/IssuanceControllerV3.sol#500-512)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.settleClaim(uint256,uint256,address)](contracts/IssuanceControllerV3.sol#L515-L568):\n\tExternal calls:\n\t- [treasury.pay(holder,payAmt)](contracts/IssuanceControllerV3.sol#L547)\n\t- [_settleAndBurnClaim(claimId,holder)](contracts/IssuanceControllerV3.sol#L553)\n\t\t- [claims.settleAndBurn(claimId,holder)](contracts/IssuanceControllerV3.sol#L619)\n\tState variables written after the call(s):\n\t- [w.state = NavWindowState.SETTLED_FULL](contracts/IssuanceControllerV3.sol#L561)\n\t[IssuanceControllerV3.navWindows](contracts/IssuanceControllerV3.sol#L107) can be used in cross function reentrancies:\n\t- [IssuanceControllerV3.closeNavWindow()](contracts/IssuanceControllerV3.sol#L394-L401)\n\t- [IssuanceControllerV3.currentNavWindow()](contracts/IssuanceControllerV3.sol#L351-L353)\n\t- [IssuanceControllerV3.getWindowSummary(uint256)](contracts/IssuanceControllerV3.sol#L304-L326)\n\t- [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497)\n\t- [IssuanceControllerV3.navWindows](contracts/IssuanceControllerV3.sol#L107)\n\t- [IssuanceControllerV3.nextCutoffTime()](contracts/IssuanceControllerV3.sol#L355-L361)\n\t- [IssuanceControllerV3.openNavWindow(uint256)](contracts/IssuanceControllerV3.sol#L376-L392)\n\t- [IssuanceControllerV3.strikeRedemption()](contracts/IssuanceControllerV3.sol#L500-L512)\n\t- [w.state = NavWindowState.SETTLED_PARTIAL](contracts/IssuanceControllerV3.sol#L564)\n\t[IssuanceControllerV3.navWindows](contracts/IssuanceControllerV3.sol#L107) can be used in cross function reentrancies:\n\t- [IssuanceControllerV3.closeNavWindow()](contracts/IssuanceControllerV3.sol#L394-L401)\n\t- [IssuanceControllerV3.currentNavWindow()](contracts/IssuanceControllerV3.sol#L351-L353)\n\t- [IssuanceControllerV3.getWindowSummary(uint256)](contracts/IssuanceControllerV3.sol#L304-L326)\n\t- [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497)\n\t- [IssuanceControllerV3.navWindows](contracts/IssuanceControllerV3.sol#L107)\n\t- [IssuanceControllerV3.nextCutoffTime()](contracts/IssuanceControllerV3.sol#L355-L361)\n\t- [IssuanceControllerV3.openNavWindow(uint256)](contracts/IssuanceControllerV3.sol#L376-L392)\n\t- [IssuanceControllerV3.strikeRedemption()](contracts/IssuanceControllerV3.sol#L500-L512)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 515,
                  "endLine": 568
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "51622dddaed257ad6c95e52b6e2b28b59388e7e4575aea4f63ecca39c06ca770"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.settleClaim(uint256,uint256,address) (contracts/IssuanceControllerV3.sol#515-568):\n\tExternal calls:\n\t- treasury.pay(holder,payAmt) (contracts/IssuanceControllerV3.sol#547)\n\t- _settleAndBurnClaim(claimId,holder) (contracts/IssuanceControllerV3.sol#553)\n\t\t- claims.settleAndBurn(claimId,holder) (contracts/IssuanceControllerV3.sol#625)\n\tState variables written after the call(s):\n\t- w.state = NavWindowState.SETTLED_FULL (contracts/IssuanceControllerV3.sol#561)\n\tIssuanceControllerV3.navWindows (contracts/IssuanceControllerV3.sol#107) can be used in cross function reentrancies:\n\t- IssuanceControllerV3.closeNavWindow() (contracts/IssuanceControllerV3.sol#394-401)\n\t- IssuanceControllerV3.currentNavWindow() (contracts/IssuanceControllerV3.sol#351-353)\n\t- IssuanceControllerV3.getWindowSummary(uint256) (contracts/IssuanceControllerV3.sol#304-326)\n\t- IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497)\n\t- IssuanceControllerV3.navWindows (contracts/IssuanceControllerV3.sol#107)\n\t- IssuanceControllerV3.nextCutoffTime() (contracts/IssuanceControllerV3.sol#355-361)\n\t- IssuanceControllerV3.openNavWindow(uint256) (contracts/IssuanceControllerV3.sol#376-392)\n\t- IssuanceControllerV3.strikeRedemption() (contracts/IssuanceControllerV3.sol#500-512)\n\t- w.state = NavWindowState.SETTLED_PARTIAL (contracts/IssuanceControllerV3.sol#564)\n\tIssuanceControllerV3.navWindows (contracts/IssuanceControllerV3.sol#107) can be used in cross function reentrancies:\n\t- IssuanceControllerV3.closeNavWindow() (contracts/IssuanceControllerV3.sol#394-401)\n\t- IssuanceControllerV3.currentNavWindow() (contracts/IssuanceControllerV3.sol#351-353)\n\t- IssuanceControllerV3.getWindowSummary(uint256) (contracts/IssuanceControllerV3.sol#304-326)\n\t- IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497)\n\t- IssuanceControllerV3.navWindows (contracts/IssuanceControllerV3.sol#107)\n\t- IssuanceControllerV3.nextCutoffTime() (contracts/IssuanceControllerV3.sol#355-361)\n\t- IssuanceControllerV3.openNavWindow(uint256) (contracts/IssuanceControllerV3.sol#376-392)\n\t- IssuanceControllerV3.strikeRedemption() (contracts/IssuanceControllerV3.sol#500-512)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.settleClaim(uint256,uint256,address)](contracts/IssuanceControllerV3.sol#L515-L568):\n\tExternal calls:\n\t- [treasury.pay(holder,payAmt)](contracts/IssuanceControllerV3.sol#L547)\n\t- [_settleAndBurnClaim(claimId,holder)](contracts/IssuanceControllerV3.sol#L553)\n\t\t- [claims.settleAndBurn(claimId,holder)](contracts/IssuanceControllerV3.sol#L625)\n\tState variables written after the call(s):\n\t- [w.state = NavWindowState.SETTLED_FULL](contracts/IssuanceControllerV3.sol#L561)\n\t[IssuanceControllerV3.navWindows](contracts/IssuanceControllerV3.sol#L107) can be used in cross function reentrancies:\n\t- [IssuanceControllerV3.closeNavWindow()](contracts/IssuanceControllerV3.sol#L394-L401)\n\t- [IssuanceControllerV3.currentNavWindow()](contracts/IssuanceControllerV3.sol#L351-L353)\n\t- [IssuanceControllerV3.getWindowSummary(uint256)](contracts/IssuanceControllerV3.sol#L304-L326)\n\t- [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497)\n\t- [IssuanceControllerV3.navWindows](contracts/IssuanceControllerV3.sol#L107)\n\t- [IssuanceControllerV3.nextCutoffTime()](contracts/IssuanceControllerV3.sol#L355-L361)\n\t- [IssuanceControllerV3.openNavWindow(uint256)](contracts/IssuanceControllerV3.sol#L376-L392)\n\t- [IssuanceControllerV3.strikeRedemption()](contracts/IssuanceControllerV3.sol#L500-L512)\n\t- [w.state = NavWindowState.SETTLED_PARTIAL](contracts/IssuanceControllerV3.sol#L564)\n\t[IssuanceControllerV3.navWindows](contracts/IssuanceControllerV3.sol#L107) can be used in cross function reentrancies:\n\t- [IssuanceControllerV3.closeNavWindow()](contracts/IssuanceControllerV3.sol#L394-L401)\n\t- [IssuanceControllerV3.currentNavWindow()](contracts/IssuanceControllerV3.sol#L351-L353)\n\t- [IssuanceControllerV3.getWindowSummary(uint256)](contracts/IssuanceControllerV3.sol#L304-L326)\n\t- [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497)\n\t- [IssuanceControllerV3.navWindows](contracts/IssuanceControllerV3.sol#L107)\n\t- [IssuanceControllerV3.nextCutoffTime()](contracts/IssuanceControllerV3.sol#L355-L361)\n\t- [IssuanceControllerV3.openNavWindow(uint256)](contracts/IssuanceControllerV3.sol#L376-L392)\n\t- [IssuanceControllerV3.strikeRedemption()](contracts/IssuanceControllerV3.sol#L500-L512)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 515,
                  "endLine": 568
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "620ea088a2031e9de16e3d5446819f62780ae50de86ad08fdf9ae9f40fa5d4ef"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497):\n\tExternal calls:\n\t- claimId = _mintClaimForUser(u,w.id,amt) (contracts/IssuanceControllerV3.sol#475)\n\t\t- claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#614)\n\tState variables written after the call(s):\n\t- pendingBy[u] = 0 (contracts/IssuanceControllerV3.sol#478)\n\tIssuanceControllerV3.pendingBy (contracts/IssuanceControllerV3.sol#108) can be used in cross function reentrancies:\n\t- IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497)\n\t- IssuanceControllerV3.pendingBy (contracts/IssuanceControllerV3.sol#108)\n\t- IssuanceControllerV3.pendingOf(address) (contracts/IssuanceControllerV3.sol#363-365)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497):\n\tExternal calls:\n\t- [claimId = _mintClaimForUser(u,w.id,amt)](contracts/IssuanceControllerV3.sol#L475)\n\t\t- [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L614)\n\tState variables written after the call(s):\n\t- [pendingBy[u] = 0](contracts/IssuanceControllerV3.sol#L478)\n\t[IssuanceControllerV3.pendingBy](contracts/IssuanceControllerV3.sol#L108) can be used in cross function reentrancies:\n\t- [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497)\n\t- [IssuanceControllerV3.pendingBy](contracts/IssuanceControllerV3.sol#L108)\n\t- [IssuanceControllerV3.pendingOf(address)](contracts/IssuanceControllerV3.sol#L363-L365)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 460,
                  "endLine": 497
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c4186af65b785df5053bfe24d507e0f1db8816df1aeddb94d441efdb272b1044"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "IssuanceControllerV3.mintClaimsForWindow(address[]).totalTokens (contracts/IssuanceControllerV3.sol#466) is a local variable never initialized\n",
            "markdown": "[IssuanceControllerV3.mintClaimsForWindow(address[]).totalTokens](contracts/IssuanceControllerV3.sol#L466) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 466,
                  "endLine": 466
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "097a2595a6471a0706e8062b3abc0c1df47ca488ede3e4eb9d05af10eb2628aa"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "IssuanceControllerV3.mintClaimsForWindow(address[]).count (contracts/IssuanceControllerV3.sol#467) is a local variable never initialized\n",
            "markdown": "[IssuanceControllerV3.mintClaimsForWindow(address[]).count](contracts/IssuanceControllerV3.sol#L467) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 467,
                  "endLine": 467
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ada73629f3d36d08cbc8e661b2aa2fe9ff230235c5340cd23512683731910cb"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "NAVOracleV3.setNAV(uint256,uint256,uint256,bytes[]).valid (contracts/NAVOracleV3.sol#263) is a local variable never initialized\n",
            "markdown": "[NAVOracleV3.setNAV(uint256,uint256,uint256,bytes[]).valid](contracts/NAVOracleV3.sol#L263) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55f136b1db39a837d3ad9464ae481bc73c436a00e11dbd08ddfc7f93a8c63bcc"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "IssuanceControllerV3._liquidityOk() (contracts/IssuanceControllerV3.sol#586-597) ignores return value by (None,None,irbTarget,None,None) = treasury.getLiquidityStatus() (contracts/IssuanceControllerV3.sol#587)\n",
            "markdown": "[IssuanceControllerV3._liquidityOk()](contracts/IssuanceControllerV3.sol#L586-L597) ignores return value by [(None,None,irbTarget,None,None) = treasury.getLiquidityStatus()](contracts/IssuanceControllerV3.sol#L587)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 586,
                  "endLine": 597
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "452ff3b4c9f9783912ac4aae0880c70bd89be565cddd02772697bd3a6ffc9e04"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "IssuanceControllerV3._liquidityOk() (contracts/IssuanceControllerV3.sol#586-597) ignores return value by (current,target,None,None) = preBuffer.getBufferStatus() (contracts/IssuanceControllerV3.sol#595)\n",
            "markdown": "[IssuanceControllerV3._liquidityOk()](contracts/IssuanceControllerV3.sol#L586-L597) ignores return value by [(current,target,None,None) = preBuffer.getBufferStatus()](contracts/IssuanceControllerV3.sol#L595)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 586,
                  "endLine": 597
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5f3c0557c1ce260bb9def75d5e0ce919b9055899353c9771551914a44453f6b1"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "IssuanceControllerV3._getClaimInfo(uint256) (contracts/IssuanceControllerV3.sol#613-616) ignores return value by (owner,amount,None,settled) = claims.claimInfo(claimId) (contracts/IssuanceControllerV3.sol#615-616)\n",
            "markdown": "[IssuanceControllerV3._getClaimInfo(uint256)](contracts/IssuanceControllerV3.sol#L613-L616) ignores return value by [(owner,amount,None,settled) = claims.claimInfo(claimId)](contracts/IssuanceControllerV3.sol#L615-L616)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 613,
                  "endLine": 616
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ed5b609d7e1a338faef5aa254e128220ce81a2c2d688fe83cdf812010eab15e6"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "IssuanceControllerV3._getClaimInfo(uint256) (contracts/IssuanceControllerV3.sol#619-622) ignores return value by (owner,amount,None,settled) = claims.claimInfo(claimId) (contracts/IssuanceControllerV3.sol#620)\n",
            "markdown": "[IssuanceControllerV3._getClaimInfo(uint256)](contracts/IssuanceControllerV3.sol#L619-L622) ignores return value by [(owner,amount,None,settled) = claims.claimInfo(claimId)](contracts/IssuanceControllerV3.sol#L620)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 619,
                  "endLine": 622
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2a012a23b15fa71a449d36e25d45826dc10d3490a228c8a1be8409723ae8b1d7"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "IssuanceControllerV3._liquidityOk() (contracts/IssuanceControllerV3.sol#586-602) ignores return value by (None,None,irbTarget,None,None) = treasury.getLiquidityStatus() (contracts/IssuanceControllerV3.sol#588)\n",
            "markdown": "[IssuanceControllerV3._liquidityOk()](contracts/IssuanceControllerV3.sol#L586-L602) ignores return value by [(None,None,irbTarget,None,None) = treasury.getLiquidityStatus()](contracts/IssuanceControllerV3.sol#L588)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 586,
                  "endLine": 602
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8af78e3fe0baabc13c3eab046224f85a2b13a152d18d02ac0afdc62f6e3839b8"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "IssuanceControllerV3._liquidityOk() (contracts/IssuanceControllerV3.sol#586-602) ignores return value by (current,target,None,None) = preBuffer.getBufferStatus() (contracts/IssuanceControllerV3.sol#597)\n",
            "markdown": "[IssuanceControllerV3._liquidityOk()](contracts/IssuanceControllerV3.sol#L586-L602) ignores return value by [(current,target,None,None) = preBuffer.getBufferStatus()](contracts/IssuanceControllerV3.sol#L597)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 586,
                  "endLine": 602
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eca0c4a4adb08e2bbff3ab6badfee221f4704966b577d2156680eb12b5fcbb84"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "IssuanceControllerV3._calculateEffectiveCapacity(bytes32,uint256).canIssue (contracts/IssuanceControllerV3.sol#633) shadows:\n\t- IssuanceControllerV3.canIssue(uint256,uint256,uint256,bytes32) (contracts/IssuanceControllerV3.sol#666-701) (function)\n",
            "markdown": "[IssuanceControllerV3._calculateEffectiveCapacity(bytes32,uint256).canIssue](contracts/IssuanceControllerV3.sol#L633) shadows:\n\t- [IssuanceControllerV3.canIssue(uint256,uint256,uint256,bytes32)](contracts/IssuanceControllerV3.sol#L666-L701) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 633,
                  "endLine": 633
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aae99ddd7bb80677f2a84008aea1413a38fbcd33e227fa0bfecb2734027a6a75"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "TrancheManagerV2.constructor(address,address,address).oracle_ (contracts/TrancheManagerV2.sol#70) lacks a zero-check on :\n\t\t- oracle = oracle_ (contracts/TrancheManagerV2.sol#72)\n",
            "markdown": "[TrancheManagerV2.constructor(address,address,address).oracle_](contracts/TrancheManagerV2.sol#L70) lacks a zero-check on :\n\t\t- [oracle = oracle_](contracts/TrancheManagerV2.sol#L72)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "00cb3927b00cc405181037627bc67085826e64d42f44272073b5c9fa24fd0346"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "MemberRegistry.setRegistrar(address).r (contracts/MemberRegistry.sol#26) lacks a zero-check on :\n\t\t- registrar = r (contracts/MemberRegistry.sol#27)\n",
            "markdown": "[MemberRegistry.setRegistrar(address).r](contracts/MemberRegistry.sol#L26) lacks a zero-check on :\n\t\t- [registrar = r](contracts/MemberRegistry.sol#L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/MemberRegistry.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5fba7b002cbff85ba2c790681d608f7c28ec634730bed3a697193b0748e58a8e"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "MalRedemptionClaim.setReentrantTarget(address,bytes)._target (contracts/malicious/MalRedemptionClaim.sol#30) lacks a zero-check on :\n\t\t- targetContract = _target (contracts/malicious/MalRedemptionClaim.sol#31)\n",
            "markdown": "[MalRedemptionClaim.setReentrantTarget(address,bytes)._target](contracts/malicious/MalRedemptionClaim.sol#L30) lacks a zero-check on :\n\t\t- [targetContract = _target](contracts/malicious/MalRedemptionClaim.sol#L31)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalRedemptionClaim.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "75bf150546ce9c6b6a0464183c78cba1171b78a124ec79315f416166fd2146e9"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "TrancheManagerV2.constructor(address,address,address).config_ (contracts/TrancheManagerV2.sol#70) lacks a zero-check on :\n\t\t- config = config_ (contracts/TrancheManagerV2.sol#72)\n",
            "markdown": "[TrancheManagerV2.constructor(address,address,address).config_](contracts/TrancheManagerV2.sol#L70) lacks a zero-check on :\n\t\t- [config = config_](contracts/TrancheManagerV2.sol#L72)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7606f72f9b5dfeb7a177edcdd7a07fd79cba0c1fb0951b6710cddb55559dfe8"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "MalUSDC.setReentrantTarget(address,bytes)._target (contracts/malicious/MalUSDC.sol#21) lacks a zero-check on :\n\t\t- targetContract = _target (contracts/malicious/MalUSDC.sol#22)\n",
            "markdown": "[MalUSDC.setReentrantTarget(address,bytes)._target](contracts/malicious/MalUSDC.sol#L21) lacks a zero-check on :\n\t\t- [targetContract = _target](contracts/malicious/MalUSDC.sol#L22)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalUSDC.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d73e371c783efeb6585fa479b57d5f0fa30d7040925b8a2f31adf4395b2e348a"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "IssuanceControllerV3._mintClaimForUser(address,uint256,uint256) (contracts/IssuanceControllerV3.sol#607-613) has external calls inside a loop: claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#609-612)\n\tCalls stack containing the loop:\n\t\tIssuanceControllerV3.mintClaimsForWindow(address[])\n",
            "markdown": "[IssuanceControllerV3._mintClaimForUser(address,uint256,uint256)](contracts/IssuanceControllerV3.sol#L607-L613) has external calls inside a loop: [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L609-L612)\n\tCalls stack containing the loop:\n\t\tIssuanceControllerV3.mintClaimsForWindow(address[])\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 607,
                  "endLine": 613
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "174c76674b5b9fd51d0dd140c6c0f497bb5bdc82a4e28f0694326ed2f549b9c9"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "IssuanceControllerV3._mintClaimForUser(address,uint256,uint256) (contracts/IssuanceControllerV3.sol#613-617) has external calls inside a loop: claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#614)\n\tCalls stack containing the loop:\n\t\tIssuanceControllerV3.mintClaimsForWindow(address[])\n",
            "markdown": "[IssuanceControllerV3._mintClaimForUser(address,uint256,uint256)](contracts/IssuanceControllerV3.sol#L613-L617) has external calls inside a loop: [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L614)\n\tCalls stack containing the loop:\n\t\tIssuanceControllerV3.mintClaimsForWindow(address[])\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 613,
                  "endLine": 617
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "73790cfda6991fa6b331050d690acbeca024dcf9c53b06a607aa94bce14ced3d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.requestRedeemOnBehalf(address,uint256) (contracts/IssuanceControllerV3.sol#404-457):\n\tExternal calls:\n\t- token.burn(user,amt) (contracts/IssuanceControllerV3.sol#428)\n\t- preBuffer.instantRedeem(user,usdcOut) (contracts/IssuanceControllerV3.sol#431)\n\tState variables written after the call(s):\n\t- totalIssued -= amt (contracts/IssuanceControllerV3.sol#435)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.requestRedeemOnBehalf(address,uint256)](contracts/IssuanceControllerV3.sol#L404-L457):\n\tExternal calls:\n\t- [token.burn(user,amt)](contracts/IssuanceControllerV3.sol#L428)\n\t- [preBuffer.instantRedeem(user,usdcOut)](contracts/IssuanceControllerV3.sol#L431)\n\tState variables written after the call(s):\n\t- [totalIssued -= amt](contracts/IssuanceControllerV3.sol#L435)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 457
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0742a9edbd4ecafadef22bdf379668728f2c83e8e68f21e35bc5e4c3b37c4e71"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3._mintClaimForUser(address,uint256,uint256) (contracts/IssuanceControllerV3.sol#607-613):\n\tExternal calls:\n\t- claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#609-612)\n\tState variables written after the call(s):\n\t- claimToWindow[claimId] = windowId (contracts/IssuanceControllerV3.sol#613)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3._mintClaimForUser(address,uint256,uint256)](contracts/IssuanceControllerV3.sol#L607-L613):\n\tExternal calls:\n\t- [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L609-L612)\n\tState variables written after the call(s):\n\t- [claimToWindow[claimId] = windowId](contracts/IssuanceControllerV3.sol#L613)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 607,
                  "endLine": 613
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "87ac24accdf9e3948e38a6a1db5f10de2d379302555342996af422c9b4ea6f45"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497):\n\tExternal calls:\n\t- claimId = _mintClaimForUser(u,w.id,amt) (contracts/IssuanceControllerV3.sol#475)\n\t\t- claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#609-612)\n\tState variables written after the call(s):\n\t- claimToWindow[claimId] = w.id (contracts/IssuanceControllerV3.sol#482)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497):\n\tExternal calls:\n\t- [claimId = _mintClaimForUser(u,w.id,amt)](contracts/IssuanceControllerV3.sol#L475)\n\t\t- [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L609-L612)\n\tState variables written after the call(s):\n\t- [claimToWindow[claimId] = w.id](contracts/IssuanceControllerV3.sol#L482)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 460,
                  "endLine": 497
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a42610ca14161ce8e5eab473aa848d699b420e68ab19c0b9111065c3b048a47"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.settleClaim(uint256,uint256,address) (contracts/IssuanceControllerV3.sol#515-568):\n\tExternal calls:\n\t- treasury.pay(holder,payAmt) (contracts/IssuanceControllerV3.sol#547)\n\tState variables written after the call(s):\n\t- reservedForNav -= amountTokens (contracts/IssuanceControllerV3.sol#552)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.settleClaim(uint256,uint256,address)](contracts/IssuanceControllerV3.sol#L515-L568):\n\tExternal calls:\n\t- [treasury.pay(holder,payAmt)](contracts/IssuanceControllerV3.sol#L547)\n\tState variables written after the call(s):\n\t- [reservedForNav -= amountTokens](contracts/IssuanceControllerV3.sol#L552)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 515,
                  "endLine": 568
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7e2843d59e26a14412212f0fdde375e55ab4c918c524a26ad9e1ab235efce1b"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497):\n\tExternal calls:\n\t- claimId = _mintClaimForUser(u,w.id,amt) (contracts/IssuanceControllerV3.sol#475)\n\t\t- claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#614)\n\tState variables written after the call(s):\n\t- claimToWindow[claimId] = w.id (contracts/IssuanceControllerV3.sol#482)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497):\n\tExternal calls:\n\t- [claimId = _mintClaimForUser(u,w.id,amt)](contracts/IssuanceControllerV3.sol#L475)\n\t\t- [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L614)\n\tState variables written after the call(s):\n\t- [claimToWindow[claimId] = w.id](contracts/IssuanceControllerV3.sol#L482)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 460,
                  "endLine": 497
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "365d72c50944b86b6ce854fd09750678e54568a029e64d890b112d7090576e1b"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3._mintClaimForUser(address,uint256,uint256) (contracts/IssuanceControllerV3.sol#613-617):\n\tExternal calls:\n\t- claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#614)\n\tState variables written after the call(s):\n\t- claimToWindow[claimId] = windowId (contracts/IssuanceControllerV3.sol#615)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3._mintClaimForUser(address,uint256,uint256)](contracts/IssuanceControllerV3.sol#L613-L617):\n\tExternal calls:\n\t- [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L614)\n\tState variables written after the call(s):\n\t- [claimToWindow[claimId] = windowId](contracts/IssuanceControllerV3.sol#L615)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 613,
                  "endLine": 617
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4376c9e1d3240e20c12c537342dd9e24a0b26a9cee5e0f8b95ce728d4708a9c3"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.revertToRatified() (contracts/IssuanceControllerV3.sol#989-991):\n\tExternal calls:\n\t- tm.setIssuanceLocked(true) (contracts/IssuanceControllerV3.sol#990)\n\tEvent emitted after the call(s):\n\t- DetachmentReverted(ratifiedLo,ratifiedHi) (contracts/IssuanceControllerV3.sol#990-991)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.revertToRatified()](contracts/IssuanceControllerV3.sol#L989-L991):\n\tExternal calls:\n\t- [tm.setIssuanceLocked(true)](contracts/IssuanceControllerV3.sol#L990)\n\tEvent emitted after the call(s):\n\t- [DetachmentReverted(ratifiedLo,ratifiedHi)](contracts/IssuanceControllerV3.sol#L990-L991)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 989,
                  "endLine": 991
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "08c741266673ed7128333cec82acdf3c84cd0b6587b4b6a33f841b4340424147"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in OperationalAgreement.whitelistPool(address,bool) (contracts/OperationalAgreement.sol#57-60):\n\tExternal calls:\n\t- registry.setPool(pool,ok) (contracts/OperationalAgreement.sol#59)\n\tEvent emitted after the call(s):\n\t- PoolWhitelisted(pool,ok) (contracts/OperationalAgreement.sol#59)\n",
            "markdown": "Reentrancy in [OperationalAgreement.whitelistPool(address,bool)](contracts/OperationalAgreement.sol#L57-L60):\n\tExternal calls:\n\t- [registry.setPool(pool,ok)](contracts/OperationalAgreement.sol#L59)\n\tEvent emitted after the call(s):\n\t- [PoolWhitelisted(pool,ok)](contracts/OperationalAgreement.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/OperationalAgreement.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "618282bfc75771eedacb4e74b4308a1a7f1ad130493aeaf6a76f527aac143735"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in OperationalAgreement.revokeMember(address) (contracts/OperationalAgreement.sol#52-55):\n\tExternal calls:\n\t- registry.setMember(user,false) (contracts/OperationalAgreement.sol#54)\n\tEvent emitted after the call(s):\n\t- MemberRevoked(user) (contracts/OperationalAgreement.sol#54)\n",
            "markdown": "Reentrancy in [OperationalAgreement.revokeMember(address)](contracts/OperationalAgreement.sol#L52-L55):\n\tExternal calls:\n\t- [registry.setMember(user,false)](contracts/OperationalAgreement.sol#L54)\n\tEvent emitted after the call(s):\n\t- [MemberRevoked(user)](contracts/OperationalAgreement.sol#L54)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/OperationalAgreement.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "67c2a2a8774753eac667310aa5ac3b3d8412aea0907e2a8b37cd3defc9c6c2bd"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MalRedemptionClaim.settleAndBurn(uint256,address) (contracts/malicious/MalRedemptionClaim.sol#46-62):\n\tExternal calls:\n\t- (callSuccess,None) = targetContract.call(reentrantCall) (contracts/malicious/MalRedemptionClaim.sol#56)\n\t- _burn(holder,claimId,info.amountTokens) (contracts/malicious/MalRedemptionClaim.sol#61)\n\t\t- response = IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,values,data) (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#69-85)\n\t\t- response = IERC1155Receiver(to).onERC1155Received(operator,from,id,value,data) (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#34-48)\n\t\t- ERC1155Utils.checkOnERC1155Received(operator,from,to,id,value,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#194)\n\t\t- ERC1155Utils.checkOnERC1155BatchReceived(operator,from,to,ids,values,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#196)\n\tEvent emitted after the call(s):\n\t- TransferBatch(operator,from,to,ids,values) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#168)\n\t\t- _burn(holder,claimId,info.amountTokens) (contracts/malicious/MalRedemptionClaim.sol#61)\n\t- TransferSingle(operator,from,to,id_scope_0,value_scope_1) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#166)\n\t\t- _burn(holder,claimId,info.amountTokens) (contracts/malicious/MalRedemptionClaim.sol#61)\n",
            "markdown": "Reentrancy in [MalRedemptionClaim.settleAndBurn(uint256,address)](contracts/malicious/MalRedemptionClaim.sol#L46-L62):\n\tExternal calls:\n\t- [(callSuccess,None) = targetContract.call(reentrantCall)](contracts/malicious/MalRedemptionClaim.sol#L56)\n\t- [_burn(holder,claimId,info.amountTokens)](contracts/malicious/MalRedemptionClaim.sol#L61)\n\t\t- [response = IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,values,data)](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L69-L85)\n\t\t- [response = IERC1155Receiver(to).onERC1155Received(operator,from,id,value,data)](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L34-L48)\n\t\t- [ERC1155Utils.checkOnERC1155Received(operator,from,to,id,value,data)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L194)\n\t\t- [ERC1155Utils.checkOnERC1155BatchReceived(operator,from,to,ids,values,data)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L196)\n\tEvent emitted after the call(s):\n\t- [TransferBatch(operator,from,to,ids,values)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L168)\n\t\t- [_burn(holder,claimId,info.amountTokens)](contracts/malicious/MalRedemptionClaim.sol#L61)\n\t- [TransferSingle(operator,from,to,id_scope_0,value_scope_1)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L166)\n\t\t- [_burn(holder,claimId,info.amountTokens)](contracts/malicious/MalRedemptionClaim.sol#L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalRedemptionClaim.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7bb9edae8c651a23d39ed9b6cdf1d2f3dcc7a8ad7a91a4ada5fef199467813a9"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497):\n\tExternal calls:\n\t- claimId = _mintClaimForUser(u,w.id,amt) (contracts/IssuanceControllerV3.sol#475)\n\t\t- claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#609-612)\n\tEvent emitted after the call(s):\n\t- NAVClaimsMinted(w.id,count,totalTokens) (contracts/IssuanceControllerV3.sol#496)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497):\n\tExternal calls:\n\t- [claimId = _mintClaimForUser(u,w.id,amt)](contracts/IssuanceControllerV3.sol#L475)\n\t\t- [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L609-L612)\n\tEvent emitted after the call(s):\n\t- [NAVClaimsMinted(w.id,count,totalTokens)](contracts/IssuanceControllerV3.sol#L496)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 460,
                  "endLine": 497
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b986a4a261f47a2fcc86e4fc048d57a6567b6de8a2217d7b1aa0e717d2153b35"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in RedemptionClaim.settleAndBurn(uint256,address) (contracts/RedemptionClaim.sol#71-78):\n\tExternal calls:\n\t- _burn(holder,id,1) (contracts/RedemptionClaim.sol#76)\n\t\t- response = IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,values,data) (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#69-85)\n\t\t- response = IERC1155Receiver(to).onERC1155Received(operator,from,id,value,data) (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#34-48)\n\t\t- ERC1155Utils.checkOnERC1155Received(operator,from,to,id,value,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#194)\n\t\t- ERC1155Utils.checkOnERC1155BatchReceived(operator,from,to,ids,values,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#196)\n\tEvent emitted after the call(s):\n\t- ClaimSettled(id,holder) (contracts/RedemptionClaim.sol#77)\n",
            "markdown": "Reentrancy in [RedemptionClaim.settleAndBurn(uint256,address)](contracts/RedemptionClaim.sol#L71-L78):\n\tExternal calls:\n\t- [_burn(holder,id,1)](contracts/RedemptionClaim.sol#L76)\n\t\t- [response = IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,values,data)](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L69-L85)\n\t\t- [response = IERC1155Receiver(to).onERC1155Received(operator,from,id,value,data)](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L34-L48)\n\t\t- [ERC1155Utils.checkOnERC1155Received(operator,from,to,id,value,data)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L194)\n\t\t- [ERC1155Utils.checkOnERC1155BatchReceived(operator,from,to,ids,values,data)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L196)\n\tEvent emitted after the call(s):\n\t- [ClaimSettled(id,holder)](contracts/RedemptionClaim.sol#L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/RedemptionClaim.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd464e1a5810de2f04d9e4a751e1afa7118b23a91b723418f4050f46873c719d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in RedemptionClaim.mintClaim(address,uint256,uint256) (contracts/RedemptionClaim.sol#50-62):\n\tExternal calls:\n\t- _mint(to,id,1,) (contracts/RedemptionClaim.sol#59)\n\t\t- response = IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,values,data) (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#69-85)\n\t\t- response = IERC1155Receiver(to).onERC1155Received(operator,from,id,value,data) (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#34-48)\n\t\t- ERC1155Utils.checkOnERC1155Received(operator,from,to,id,value,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#194)\n\t\t- ERC1155Utils.checkOnERC1155BatchReceived(operator,from,to,ids,values,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#196)\n\tEvent emitted after the call(s):\n\t- ClaimMinted(id,to,amount,strikeTs) (contracts/RedemptionClaim.sol#60)\n",
            "markdown": "Reentrancy in [RedemptionClaim.mintClaim(address,uint256,uint256)](contracts/RedemptionClaim.sol#L50-L62):\n\tExternal calls:\n\t- [_mint(to,id,1,)](contracts/RedemptionClaim.sol#L59)\n\t\t- [response = IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,values,data)](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L69-L85)\n\t\t- [response = IERC1155Receiver(to).onERC1155Received(operator,from,id,value,data)](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L34-L48)\n\t\t- [ERC1155Utils.checkOnERC1155Received(operator,from,to,id,value,data)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L194)\n\t\t- [ERC1155Utils.checkOnERC1155BatchReceived(operator,from,to,ids,values,data)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L196)\n\tEvent emitted after the call(s):\n\t- [ClaimMinted(id,to,amount,strikeTs)](contracts/RedemptionClaim.sol#L60)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/RedemptionClaim.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4f875b9c1eb9a437064b6d392cb6fe285c329e35ead73cb62356c3b85b049cd"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in OperationalAgreement.approveMember(address) (contracts/OperationalAgreement.sol#47-50):\n\tExternal calls:\n\t- registry.setMember(user,true) (contracts/OperationalAgreement.sol#49)\n\tEvent emitted after the call(s):\n\t- MemberApproved(user) (contracts/OperationalAgreement.sol#49)\n",
            "markdown": "Reentrancy in [OperationalAgreement.approveMember(address)](contracts/OperationalAgreement.sol#L47-L50):\n\tExternal calls:\n\t- [registry.setMember(user,true)](contracts/OperationalAgreement.sol#L49)\n\tEvent emitted after the call(s):\n\t- [MemberApproved(user)](contracts/OperationalAgreement.sol#L49)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/OperationalAgreement.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef3ae7be5aef335704ab3571e9487469f4d4fbb68e8f5d8adadc69e23abf6d41"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.mintClaimsForWindow(address[]) (contracts/IssuanceControllerV3.sol#460-497):\n\tExternal calls:\n\t- claimId = _mintClaimForUser(u,w.id,amt) (contracts/IssuanceControllerV3.sol#475)\n\t\t- claimId = claims.mintClaim(to,0,amount) (contracts/IssuanceControllerV3.sol#614)\n\tEvent emitted after the call(s):\n\t- NAVClaimsMinted(w.id,count,totalTokens) (contracts/IssuanceControllerV3.sol#496)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.mintClaimsForWindow(address[])](contracts/IssuanceControllerV3.sol#L460-L497):\n\tExternal calls:\n\t- [claimId = _mintClaimForUser(u,w.id,amt)](contracts/IssuanceControllerV3.sol#L475)\n\t\t- [claimId = claims.mintClaim(to,0,amount)](contracts/IssuanceControllerV3.sol#L614)\n\tEvent emitted after the call(s):\n\t- [NAVClaimsMinted(w.id,count,totalTokens)](contracts/IssuanceControllerV3.sol#L496)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 460,
                  "endLine": 497
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "549727693b30a59b36c462da874e535ea42d4c1887bc00185770756b7d55674d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in IssuanceControllerV3.revertToRatified() (contracts/IssuanceControllerV3.sol#998-1001):\n\tExternal calls:\n\t- tm.setIssuanceLocked(true) (contracts/IssuanceControllerV3.sol#999)\n\tEvent emitted after the call(s):\n\t- DetachmentReverted(ratifiedLo,ratifiedHi) (contracts/IssuanceControllerV3.sol#1000)\n",
            "markdown": "Reentrancy in [IssuanceControllerV3.revertToRatified()](contracts/IssuanceControllerV3.sol#L998-L1001):\n\tExternal calls:\n\t- [tm.setIssuanceLocked(true)](contracts/IssuanceControllerV3.sol#L999)\n\tEvent emitted after the call(s):\n\t- [DetachmentReverted(ratifiedLo,ratifiedHi)](contracts/IssuanceControllerV3.sol#L1000)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 998,
                  "endLine": 1001
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c1b46d00ed07187c2d802683607e94789a9d87a3552d004cfc5f5bad448d64ef"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TrancheManagerV2.raiseBRICSDetachment(uint16,uint16) (contracts/TrancheManagerV2.sol#127-152) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp - lastDetachmentUpdateTs < DETACHMENT_COOLDOWN (contracts/TrancheManagerV2.sol#140-141)\n\t- last + ORACLE_STALE_TOL < block.timestamp (contracts/TrancheManagerV2.sol#145-146)\n",
            "markdown": "[TrancheManagerV2.raiseBRICSDetachment(uint16,uint16)](contracts/TrancheManagerV2.sol#L127-L152) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp - lastDetachmentUpdateTs < DETACHMENT_COOLDOWN](contracts/TrancheManagerV2.sol#L140-L141)\n\t- [last + ORACLE_STALE_TOL < block.timestamp](contracts/TrancheManagerV2.sol#L145-L146)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0b6329fbb0852c5c7d482dfd43b24a4bc2d57aa44a7b4715491058d8d56e8e48"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "NAVOracleV3.navRay() (contracts/NAVOracleV3.sol#103-109) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- degradationMode || _isStale() (contracts/NAVOracleV3.sol#104)\n\t- d <= 0 (contracts/NAVOracleV3.sol#106)\n",
            "markdown": "[NAVOracleV3.navRay()](contracts/NAVOracleV3.sol#L103-L109) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [degradationMode || _isStale()](contracts/NAVOracleV3.sol#L104)\n\t- [d <= 0](contracts/NAVOracleV3.sol#L106)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 109
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15c2baf6052d7d89f94c7e9840553c5e32d27547deef2221b5e7c3be44b54d09"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes) (contracts/IssuanceControllerV3.sol#702-796) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > deadline (contracts/IssuanceControllerV3.sol#716)\n\t- lastIssueDay[msg.sender] != today (contracts/IssuanceControllerV3.sol#773-774)\n",
            "markdown": "[IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes)](contracts/IssuanceControllerV3.sol#L702-L796) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > deadline](contracts/IssuanceControllerV3.sol#L716)\n\t- [lastIssueDay[msg.sender] != today](contracts/IssuanceControllerV3.sol#L773-L774)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 702,
                  "endLine": 796
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "24e7b2bec6907d188626f3d5c175d70e1ad407979b64ca22ccaa07453e6f20da"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "ClaimRegistry.getClaim(uint256) (contracts/ClaimRegistry.sol#215-218) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- ! claims[claimId].isActive && ! claims[claimId].isSettled (contracts/ClaimRegistry.sol#216)\n",
            "markdown": "[ClaimRegistry.getClaim(uint256)](contracts/ClaimRegistry.sol#L215-L218) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [! claims[claimId].isActive && ! claims[claimId].isSettled](contracts/ClaimRegistry.sol#L216)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ClaimRegistry.sol"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 218
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "32ab204e1378b133b03b7ecdf76d8119669c028194ae2e13ee02da187c7bacfa"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "NAVOracleV3.emergencySetNAV(uint256,uint256,bytes) (contracts/NAVOracleV3.sol#284-301) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(degradationMode || _isStale(),not in degradation) (contracts/NAVOracleV3.sol#285)\n",
            "markdown": "[NAVOracleV3.emergencySetNAV(uint256,uint256,bytes)](contracts/NAVOracleV3.sol#L284-L301) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(degradationMode || _isStale(),not in degradation)](contracts/NAVOracleV3.sol#L285)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 301
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "33d4645170ae44054610cdbb2660e3f4ae5f8dc95ee49b09c253931aebaf02f4"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "NAVOracleV3._isStale() (contracts/NAVOracleV3.sol#217-219) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _lastTs + staleThreshold (contracts/NAVOracleV3.sol#218)\n",
            "markdown": "[NAVOracleV3._isStale()](contracts/NAVOracleV3.sol#L217-L219) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > _lastTs + staleThreshold](contracts/NAVOracleV3.sol#L218)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 219
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4983173358e99a95294ea9f75bd82dc64ec2b08c2c75efe7095b2332a4453709"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "NAVOracleV3._haircut(uint256) (contracts/NAVOracleV3.sol#240-247) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- age >= t3After (contracts/NAVOracleV3.sol#242-245)\n\t- age >= t2After (contracts/NAVOracleV3.sol#242-245)\n\t- age >= t1After (contracts/NAVOracleV3.sol#242-245)\n",
            "markdown": "[NAVOracleV3._haircut(uint256)](contracts/NAVOracleV3.sol#L240-L247) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [age >= t3After](contracts/NAVOracleV3.sol#L242-L245)\n\t- [age >= t2After](contracts/NAVOracleV3.sol#L242-L245)\n\t- [age >= t1After](contracts/NAVOracleV3.sol#L242-L245)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 240,
                  "endLine": 247
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f7951294d1ad958e0559ad54ce7ab9d671ceff55b81628c254097fd17c8e304"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "MezzanineVault.withdraw(uint256,address,address) (contracts/MezzanineVault.sol#51-54) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp > reinvestUntil || ! principalLocked,reinvest lock) (contracts/MezzanineVault.sol#52)\n",
            "markdown": "[MezzanineVault.withdraw(uint256,address,address)](contracts/MezzanineVault.sol#L51-L54) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp > reinvestUntil || ! principalLocked,reinvest lock)](contracts/MezzanineVault.sol#L52)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/MezzanineVault.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "565ca36b57599d3f0a1bc2d4789ce34a92ed0e3fc56fd3770b5caf120883b3b4"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TrancheManagerV2.getEffectiveDetachment() (contracts/TrancheManagerV2.sol#108-127) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- level == 3 && expansionTier == 2 && tier2Expiry != 0 && block.timestamp <= tier2Expiry (contracts/TrancheManagerV2.sol#115-117)\n\t- softCapExpiry != 0 && block.timestamp <= softCapExpiry (contracts/TrancheManagerV2.sol#122-125)\n",
            "markdown": "[TrancheManagerV2.getEffectiveDetachment()](contracts/TrancheManagerV2.sol#L108-L127) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [level == 3 && expansionTier == 2 && tier2Expiry != 0 && block.timestamp <= tier2Expiry](contracts/TrancheManagerV2.sol#L115-L117)\n\t- [softCapExpiry != 0 && block.timestamp <= softCapExpiry](contracts/TrancheManagerV2.sol#L122-L125)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 127
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5852187db2a19aa567ba1df0ca758dbc056423d0a7b4db4acea80539d08c5ac0"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TrancheManagerV2.enforceTier2Expiry(uint16) (contracts/TrancheManagerV2.sol#208-220) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- tier2Expiry == 0 (contracts/TrancheManagerV2.sol#210-213)\n\t- block.timestamp <= tier2Expiry (contracts/TrancheManagerV2.sol#215)\n",
            "markdown": "[TrancheManagerV2.enforceTier2Expiry(uint16)](contracts/TrancheManagerV2.sol#L208-L220) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [tier2Expiry == 0](contracts/TrancheManagerV2.sol#L210-L213)\n\t- [block.timestamp <= tier2Expiry](contracts/TrancheManagerV2.sol#L215)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 220
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5b8b967ed141893b5bea201d2ac818dd4b7f798f8d707d74b4fdccd9e0de497e"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32) (contracts/IssuanceControllerV3.sol#798-871) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastIssueDay[msg.sender] != today (contracts/IssuanceControllerV3.sol#848-849)\n",
            "markdown": "[IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32)](contracts/IssuanceControllerV3.sol#L798-L871) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [lastIssueDay[msg.sender] != today](contracts/IssuanceControllerV3.sol#L848-L849)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 798,
                  "endLine": 871
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7886f4040c0021f973f66168822d0e3b0902bd4c1776580840d8d8333a7f151b"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.settleClaim(uint256,uint256,address) (contracts/IssuanceControllerV3.sol#515-568) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < w.strikeTs + SETTLEMENT_DELAY (contracts/IssuanceControllerV3.sol#520)\n",
            "markdown": "[IssuanceControllerV3.settleClaim(uint256,uint256,address)](contracts/IssuanceControllerV3.sol#L515-L568) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp < w.strikeTs + SETTLEMENT_DELAY](contracts/IssuanceControllerV3.sol#L520)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 515,
                  "endLine": 568
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a87514a7babf4e06df9aff16fd6e954eb8ff160baef0bf6f2d5710f847a1d06"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "NAVOracleV3.getDegradationLevel() (contracts/NAVOracleV3.sol#117-131) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- timeSinceLastUpdate >= t3After (contracts/NAVOracleV3.sol#122)\n\t- timeSinceLastUpdate >= t2After (contracts/NAVOracleV3.sol#124)\n\t- timeSinceLastUpdate >= t1After (contracts/NAVOracleV3.sol#126)\n",
            "markdown": "[NAVOracleV3.getDegradationLevel()](contracts/NAVOracleV3.sol#L117-L131) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [timeSinceLastUpdate >= t3After](contracts/NAVOracleV3.sol#L122)\n\t- [timeSinceLastUpdate >= t2After](contracts/NAVOracleV3.sol#L124)\n\t- [timeSinceLastUpdate >= t1After](contracts/NAVOracleV3.sol#L126)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 131
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7c6c7ace0d6bedc38b4856b59c39e13e1a1fe3ce33713e216165f5acb9331d62"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.requestRedeemOnBehalf(address,uint256) (contracts/IssuanceControllerV3.sol#404-457) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp - lastRedeemReq[user] < cooldown (contracts/IssuanceControllerV3.sol#412)\n",
            "markdown": "[IssuanceControllerV3.requestRedeemOnBehalf(address,uint256)](contracts/IssuanceControllerV3.sol#L404-L457) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp - lastRedeemReq[user] < cooldown](contracts/IssuanceControllerV3.sol#L412)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 457
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c5662507e87f1fe2ee26ec9267f7ba893e9c39ca730cf142a7cea7ca0c47f8e"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "RedemptionClaim.safeTransferFrom(address,address,uint256,uint256,bytes) (contracts/RedemptionClaim.sol#85-101) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp + effectiveFreezeSecs < c.strikeTs,claim frozen pre-strike) (contracts/RedemptionClaim.sol#99)\n",
            "markdown": "[RedemptionClaim.safeTransferFrom(address,address,uint256,uint256,bytes)](contracts/RedemptionClaim.sol#L85-L101) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp + effectiveFreezeSecs < c.strikeTs,claim frozen pre-strike)](contracts/RedemptionClaim.sol#L99)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/RedemptionClaim.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 101
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9f4fc19f3d40fecc4c1d613dd9f6f3c1eae62dd2574a4008a3238fe364926910"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.extendRatificationDeadline() (contracts/IssuanceControllerV3.sol#964-978) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(timeElapsed >= RATIFY_DEADLINE && timeElapsed < RATIFY_DEADLINE + 86400,wrong timing) (contracts/IssuanceControllerV3.sol#975-976)\n",
            "markdown": "[IssuanceControllerV3.extendRatificationDeadline()](contracts/IssuanceControllerV3.sol#L964-L978) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(timeElapsed >= RATIFY_DEADLINE && timeElapsed < RATIFY_DEADLINE + 86400,wrong timing)](contracts/IssuanceControllerV3.sol#L975-L976)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 964,
                  "endLine": 978
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a61a8362644fb05343b760b555c625188f3a62eafdbe58ede865df0822080789"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.maybeRevertDetachment() (contracts/IssuanceControllerV3.sol#978-989) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > deadline (contracts/IssuanceControllerV3.sol#987)\n",
            "markdown": "[IssuanceControllerV3.maybeRevertDetachment()](contracts/IssuanceControllerV3.sol#L978-L989) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > deadline](contracts/IssuanceControllerV3.sol#L987)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 978,
                  "endLine": 989
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b449d6fb37c74928b99525fc46ae4ee4f7740ce17cd7006876cfcd007edeb929"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "NAVOracleV3._degradedBase() (contracts/NAVOracleV3.sol#222-237) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- base < floor_ (contracts/NAVOracleV3.sol#233)\n\t- base > ceil_ (contracts/NAVOracleV3.sol#234)\n",
            "markdown": "[NAVOracleV3._degradedBase()](contracts/NAVOracleV3.sol#L222-L237) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [base < floor_](contracts/NAVOracleV3.sol#L233)\n\t- [base > ceil_](contracts/NAVOracleV3.sol#L234)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 237
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b4846d758c3370de1c5d180defaedd747271350462042416730f593cd0a8243c"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PreTrancheBuffer.instantRedeem(address,uint256) (contracts/PreTrancheBuffer.sol#104-124) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastRedemptionDay[user] != today (contracts/PreTrancheBuffer.sol#115)\n",
            "markdown": "[PreTrancheBuffer.instantRedeem(address,uint256)](contracts/PreTrancheBuffer.sol#L104-L124) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [lastRedemptionDay[user] != today](contracts/PreTrancheBuffer.sol#L115)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PreTrancheBuffer.sol"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 124
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b886201b71c3b26974ade4de5cdfc3010d352fcdd03ac82f76b281fd6b382df6"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.closeNavWindow() (contracts/IssuanceControllerV3.sol#394-401) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < w.closeTs (contracts/IssuanceControllerV3.sol#397)\n",
            "markdown": "[IssuanceControllerV3.closeNavWindow()](contracts/IssuanceControllerV3.sol#L394-L401) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp < w.closeTs](contracts/IssuanceControllerV3.sol#L397)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 394,
                  "endLine": 401
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7eb871c7240706b2700180cda415334f7e695a8b7221544cabac5f40114e8e7"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.openNavWindow(uint256) (contracts/IssuanceControllerV3.sol#376-392) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- closeTs <= block.timestamp + 3600 || closeTs <= block.timestamp + windowMinDuration (contracts/IssuanceControllerV3.sol#378)\n",
            "markdown": "[IssuanceControllerV3.openNavWindow(uint256)](contracts/IssuanceControllerV3.sol#L376-L392) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [closeTs <= block.timestamp + 3600 || closeTs <= block.timestamp + windowMinDuration](contracts/IssuanceControllerV3.sol#L378)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 376,
                  "endLine": 392
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd710c65c9308047b6c14ac817dcdc9147835392fd8fed848c8f898fafe06cb1"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.executeMintNonceReset() (contracts/IssuanceControllerV3.sol#934-942) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(recoveryRequests[msg.sender] > 0,No reset requested) (contracts/IssuanceControllerV3.sol#936-937)\n\t- require(bool,string)(block.timestamp >= recoveryRequests[msg.sender],Timelock not expired) (contracts/IssuanceControllerV3.sol#937-938)\n",
            "markdown": "[IssuanceControllerV3.executeMintNonceReset()](contracts/IssuanceControllerV3.sol#L934-L942) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(recoveryRequests[msg.sender] > 0,No reset requested)](contracts/IssuanceControllerV3.sol#L936-L937)\n\t- [require(bool,string)(block.timestamp >= recoveryRequests[msg.sender],Timelock not expired)](contracts/IssuanceControllerV3.sol#L937-L938)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 934,
                  "endLine": 942
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d656d18e8be51a8d0c3832907dd85e8ec1867cc0d4d3cf39485d9f042f2bf06d"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PreTrancheBuffer.availableInstantCapacity(address) (contracts/PreTrancheBuffer.sol#79-94) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastRedemptionDay[user] != today (contracts/PreTrancheBuffer.sol#86)\n",
            "markdown": "[PreTrancheBuffer.availableInstantCapacity(address)](contracts/PreTrancheBuffer.sol#L79-L94) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [lastRedemptionDay[user] != today](contracts/PreTrancheBuffer.sol#L86)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PreTrancheBuffer.sol"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 94
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f65306cbcec93087e83a41af877a24d4eca887372b4134baa923a95361e5b2d6"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TrancheManagerV2.enforceSoftCapExpiry(uint16) (contracts/TrancheManagerV2.sol#167-177) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- softCapExpiry == 0 (contracts/TrancheManagerV2.sol#170)\n\t- block.timestamp <= softCapExpiry (contracts/TrancheManagerV2.sol#173)\n",
            "markdown": "[TrancheManagerV2.enforceSoftCapExpiry(uint16)](contracts/TrancheManagerV2.sol#L167-L177) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [softCapExpiry == 0](contracts/TrancheManagerV2.sol#L170)\n\t- [block.timestamp <= softCapExpiry](contracts/TrancheManagerV2.sol#L173)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f7e69fff60e2ba130cb7969b93140b4f15c9de4af24df0e5989a70db4ed9392f"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "MezzanineVault.redeem(uint256,address,address) (contracts/MezzanineVault.sol#56-59) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp > reinvestUntil || ! principalLocked,reinvest lock) (contracts/MezzanineVault.sol#57)\n",
            "markdown": "[MezzanineVault.redeem(uint256,address,address)](contracts/MezzanineVault.sol#L56-L59) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp > reinvestUntil || ! principalLocked,reinvest lock)](contracts/MezzanineVault.sol#L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/MezzanineVault.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd68b2a5f92b29044f0c00246ff590e3fb43747baeb02857d20c688280be965c"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes) (contracts/IssuanceControllerV3.sol#711-804) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > deadline (contracts/IssuanceControllerV3.sol#727)\n\t- lastIssueDay[msg.sender] != today (contracts/IssuanceControllerV3.sol#780)\n",
            "markdown": "[IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes)](contracts/IssuanceControllerV3.sol#L711-L804) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > deadline](contracts/IssuanceControllerV3.sol#L727)\n\t- [lastIssueDay[msg.sender] != today](contracts/IssuanceControllerV3.sol#L780)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 711,
                  "endLine": 804
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "19026f0d2ac726f330f4e4ae536df246c1757c1632f2e87add98581ab5c94f24"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TrancheManagerV2.raiseBRICSDetachment(uint16,uint16) (contracts/TrancheManagerV2.sol#134-156) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp - lastDetachmentUpdateTs < DETACHMENT_COOLDOWN (contracts/TrancheManagerV2.sol#145)\n\t- last + ORACLE_STALE_TOL < block.timestamp (contracts/TrancheManagerV2.sol#148)\n",
            "markdown": "[TrancheManagerV2.raiseBRICSDetachment(uint16,uint16)](contracts/TrancheManagerV2.sol#L134-L156) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp - lastDetachmentUpdateTs < DETACHMENT_COOLDOWN](contracts/TrancheManagerV2.sol#L145)\n\t- [last + ORACLE_STALE_TOL < block.timestamp](contracts/TrancheManagerV2.sol#L148)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4be4c2b61c1114c49501e9507dcdb1e4463838dde1a3b23ec92980089202391a"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32) (contracts/IssuanceControllerV3.sol#807-879) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastIssueDay[msg.sender] != today (contracts/IssuanceControllerV3.sol#855)\n",
            "markdown": "[IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32)](contracts/IssuanceControllerV3.sol#L807-L879) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [lastIssueDay[msg.sender] != today](contracts/IssuanceControllerV3.sol#L855)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 807,
                  "endLine": 879
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5aad2cd88162b7b9a0732156ed3024323da8f0b6cc4a31dd5406cb553f7ae723"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.maybeRevertDetachment() (contracts/IssuanceControllerV3.sol#985-996) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > deadline (contracts/IssuanceControllerV3.sol#993)\n",
            "markdown": "[IssuanceControllerV3.maybeRevertDetachment()](contracts/IssuanceControllerV3.sol#L985-L996) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp > deadline](contracts/IssuanceControllerV3.sol#L993)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 985,
                  "endLine": 996
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6491d5e0aca36263d9bbdf32ddea5eaebd4790874cf95840de5a0f50ab621d36"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TrancheManagerV2.enforceTier2Expiry(uint16) (contracts/TrancheManagerV2.sol#215-225) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- tier2Expiry == 0 (contracts/TrancheManagerV2.sol#216)\n\t- block.timestamp <= tier2Expiry (contracts/TrancheManagerV2.sol#217)\n",
            "markdown": "[TrancheManagerV2.enforceTier2Expiry(uint16)](contracts/TrancheManagerV2.sol#L215-L225) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [tier2Expiry == 0](contracts/TrancheManagerV2.sol#L216)\n\t- [block.timestamp <= tier2Expiry](contracts/TrancheManagerV2.sol#L217)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 225
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "98464ad23f3ef649391dcc541e88e705e05e574e30de1462254a7aefd6849c19"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TrancheManagerV2.enforceSoftCapExpiry(uint16) (contracts/TrancheManagerV2.sol#173-181) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- softCapExpiry == 0 (contracts/TrancheManagerV2.sol#174)\n\t- block.timestamp <= softCapExpiry (contracts/TrancheManagerV2.sol#175)\n",
            "markdown": "[TrancheManagerV2.enforceSoftCapExpiry(uint16)](contracts/TrancheManagerV2.sol#L173-L181) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [softCapExpiry == 0](contracts/TrancheManagerV2.sol#L174)\n\t- [block.timestamp <= softCapExpiry](contracts/TrancheManagerV2.sol#L175)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 181
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3233cfb4a2bcc47b618187b206615c2d302ad43f38159d7137f075820a7d489"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "TrancheManagerV2.getEffectiveDetachment() (contracts/TrancheManagerV2.sol#114-132) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- level == 3 && expansionTier == 2 && tier2Expiry != 0 && block.timestamp <= tier2Expiry (contracts/TrancheManagerV2.sol#118-121)\n\t- softCapExpiry != 0 && block.timestamp <= softCapExpiry (contracts/TrancheManagerV2.sol#127)\n",
            "markdown": "[TrancheManagerV2.getEffectiveDetachment()](contracts/TrancheManagerV2.sol#L114-L132) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [level == 3 && expansionTier == 2 && tier2Expiry != 0 && block.timestamp <= tier2Expiry](contracts/TrancheManagerV2.sol#L118-L121)\n\t- [softCapExpiry != 0 && block.timestamp <= softCapExpiry](contracts/TrancheManagerV2.sol#L127)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 132
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b4ad4243b178825973553ffbb092cdc7067378e7d3cef51f3cd9fff0ce7a1966"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.extendRatificationDeadline() (contracts/IssuanceControllerV3.sol#973-983) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(timeElapsed >= RATIFY_DEADLINE && timeElapsed < RATIFY_DEADLINE + 86400,wrong timing) (contracts/IssuanceControllerV3.sol#979)\n",
            "markdown": "[IssuanceControllerV3.extendRatificationDeadline()](contracts/IssuanceControllerV3.sol#L973-L983) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(timeElapsed >= RATIFY_DEADLINE && timeElapsed < RATIFY_DEADLINE + 86400,wrong timing)](contracts/IssuanceControllerV3.sol#L979)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 973,
                  "endLine": 983
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f754868401e3d8abe31f406e49433c7c601382c387e227f0475537388bf6e577"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "IssuanceControllerV3.executeMintNonceReset() (contracts/IssuanceControllerV3.sol#941-948) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(recoveryRequests[msg.sender] > 0,No reset requested) (contracts/IssuanceControllerV3.sol#942)\n\t- require(bool,string)(block.timestamp >= recoveryRequests[msg.sender],Timelock not expired) (contracts/IssuanceControllerV3.sol#943)\n",
            "markdown": "[IssuanceControllerV3.executeMintNonceReset()](contracts/IssuanceControllerV3.sol#L941-L948) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(recoveryRequests[msg.sender] > 0,No reset requested)](contracts/IssuanceControllerV3.sol#L942)\n\t- [require(bool,string)(block.timestamp >= recoveryRequests[msg.sender],Timelock not expired)](contracts/IssuanceControllerV3.sol#L943)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 941,
                  "endLine": 948
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ff8c09e7adf2ff04649e9c6eb6fbc39371e22751fdbf836b4a56a05b6eb6bf5e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SafeCast.toUint(bool) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1157-1161) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1158-1160)\n",
            "markdown": "[SafeCast.toUint(bool)](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L1157-L1161) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L1158-L1160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol"
                },
                "region": {
                  "startLine": 1157,
                  "endLine": 1161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "02f5259e080856d63e5545d201ae538dd6b493b8f5a09e4287364c8b9a650872"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getAddressSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#66-70) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#67-69)\n",
            "markdown": "[StorageSlot.getAddressSlot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L66-L70) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L67-L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "054be2726c041e3fb58c31a34494cdcecaeaee608fbdb1976c6606f26d6559fd"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.erc7201Slot(string) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#45-50) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#46-49)\n",
            "markdown": "[SlotDerivation.erc7201Slot(string)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L45-L50) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L46-L49)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0cc36b90c9760d55d81b04c479bd3447d5e01b27194e594d684ac050c6fba2eb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(address[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#383-389) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#385-387)\n",
            "markdown": "[Arrays.unsafeAccess(address[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L383-L389) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L385-L387)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 383,
                  "endLine": 389
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0d596a39e1a8062605ec62b673b01f7543fa38187283e1a764f124d759072937"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "IssuanceControllerV3._recover(bytes32,bytes) (contracts/IssuanceControllerV3.sol#270-280) uses assembly\n\t- INLINE ASM (contracts/IssuanceControllerV3.sol#273-277)\n",
            "markdown": "[IssuanceControllerV3._recover(bytes32,bytes)](contracts/IssuanceControllerV3.sol#L270-L280) uses assembly\n\t- [INLINE ASM](contracts/IssuanceControllerV3.sol#L273-L277)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 280
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1e905cf32997919dc9ab79ce11dc3f538245a837837f0966eb34fb28574ca4a0"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getUint256Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#93-97) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#94-96)\n",
            "markdown": "[StorageSlot.getUint256Slot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L93-L97) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L94-L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "264c3ea2ec5f81f48f40bc32de2e71f4534bc537579c0899d8e1bc23ed94c652"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(string[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#435-441) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#437-439)\n",
            "markdown": "[Arrays.unsafeAccess(string[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L435-L441) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L437-L439)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 435,
                  "endLine": 441
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "26c820a5bb1d8fa3dc1efbedc51bb0416221f66c649ab5da8ea32fd870c5cca5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SafeERC20._callOptionalReturnBool(IERC20,bytes) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#201-211) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#205-209)\n",
            "markdown": "[SafeERC20._callOptionalReturnBool(IERC20,bytes)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L201-L211) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L205-L209)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2d1928acc36ad4243b0ab5c5517e9d6f6fd6ac46675a53bbe016b31ae8035cc2"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Strings.escapeJSON(string) (node_modules/@openzeppelin/contracts/utils/Strings.sol#446-476) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#470-473)\n",
            "markdown": "[Strings.escapeJSON(string)](node_modules/@openzeppelin/contracts/utils/Strings.sol#L446-L476) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Strings.sol#L470-L473)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 446,
                  "endLine": 476
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2de8274c65027cb4e372cfa16f2661e7fd433edf778ec2cf1bb5e22917e98e88"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721Utils.checkOnERC721Received(address,address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol#25-49) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol#43-45)\n",
            "markdown": "[ERC721Utils.checkOnERC721Received(address,address,address,uint256,bytes)](node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol#L25-L49) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol#L43-L45)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "330737915edee699a915eef57855ae3af84bc48ee0b9fb37aa9abc91e7ad8ac1"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryModExp(bytes,bytes,bytes) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#449-471) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#461-470)\n",
            "markdown": "[Math.tryModExp(bytes,bytes,bytes)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L449-L471) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L461-L470)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 471
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3eb2bdc28e6c136822fd1d75045a31216595acdd47b75327d329c4a089f46ad6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(uint256[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#409-415) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#411-413)\n",
            "markdown": "[Arrays.unsafeAccess(uint256[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L409-L415) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L411-L413)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 409,
                  "endLine": 415
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "459b38699aab3616afd86ee1678ff0adc978b6a51c4a8abac09ee024e956b7a9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,bool) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#85-91) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#86-90)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,bool)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L85-L91) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L86-L90)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4aaa23470099551a0a42dcdbb357259a194c4f3e6c997bdf4e917930c4931418"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#144-154) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#145-153)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,bytes)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L144-L154) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L145-L153)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 154
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d15b18e25664353eb1557913389e6fc04a9a1a6ff0d5d9c6c91a0055f48dfe9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBooleanSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#75-79) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#76-78)\n",
            "markdown": "[StorageSlot.getBooleanSlot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L75-L79) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L76-L78)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ffcc4bc56133512f291e0c8f23819ab8446934f704bebe05592aa8eea731e00"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(string[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#492-496) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#493-495)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(string[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L492-L496) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L493-L495)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 492,
                  "endLine": 496
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "50ba910c6a57cf8f2235ff74545620007d319431f5c943121c8ce002b061fa62"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytes32Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#84-88) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#85-87)\n",
            "markdown": "[StorageSlot.getBytes32Slot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L84-L88) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L85-L87)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "612a9dc8c9c1dbfe7add1f8af0f4900582be8dddb47a4de76e5fa917021b0b88"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#204-275) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#227-234)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#240-249)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L204-L275) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L227-L234)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L240-L249)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65f44c3b86accfa132c68b07bb21be2f91c79e87197596cdb86d7ef037deed90"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC1155Utils.checkOnERC1155BatchReceived(address,address,address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#60-87) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#81-83)\n",
            "markdown": "[ERC1155Utils.checkOnERC1155BatchReceived(address,address,address,uint256[],uint256[],bytes)](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L60-L87) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L81-L83)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "667b9b1cc2ac1a380b9a82e1e981673db42e796ebb514cb1bb1b09495125e82b"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(bytes32[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#514-518) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#515-517)\n",
            "markdown": "[Arrays.unsafeSetLength(bytes32[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L514-L518) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L515-L517)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 514,
                  "endLine": 518
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "66ce461297ef6ab0d610cd68af29f6079f0c304dc66f67d1f13e7b6a2353bced"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(bytes[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#481-485) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#482-484)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(bytes[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L481-L485) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L482-L484)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 481,
                  "endLine": 485
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "670354cc568562532afd42180e9c35b6a0f9c2a23faf9e696c8c888e1a0871fd"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Panic.panic(uint256) (node_modules/@openzeppelin/contracts/utils/Panic.sol#50-56) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Panic.sol#51-55)\n",
            "markdown": "[Panic.panic(uint256)](node_modules/@openzeppelin/contracts/utils/Panic.sol#L50-L56) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Panic.sol#L51-L55)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Panic.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6b9e67291c502e0170fe7e856173b7dfdc60a14ed74cc695b43324c0047fff70"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,address) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#74-80) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#75-79)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,address)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L74-L80) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L75-L79)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 80
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6dc6e7a6f5845e65aa7908d2272874c501c48c63332fd5bfc194bce712a295be"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(bytes[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#422-428) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#424-426)\n",
            "markdown": "[Arrays.unsafeAccess(bytes[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L422-L428) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L424-L426)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 422,
                  "endLine": 428
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "71534ce16db9be6c988323595979d6438131a6ce4a69feaa0503206e91074d27"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeAccess(bytes32[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#396-402) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#398-400)\n",
            "markdown": "[Arrays.unsafeAccess(bytes32[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L396-L402) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L398-L400)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 396,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7614c864a716a6d04514ce5de39b68f8e78ea26a2c5de8ef59a47e703db292b5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getInt256Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#102-106) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#103-105)\n",
            "markdown": "[StorageSlot.getInt256Slot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L102-L106) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L103-L105)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "76502d1be4f6d19cafe0691c0f0f12ee6bd060f0d2e31208ded3c04716e69dd3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Strings.toChecksumHexString(address) (node_modules/@openzeppelin/contracts/utils/Strings.sol#111-129) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#116-118)\n",
            "markdown": "[Strings.toChecksumHexString(address)](node_modules/@openzeppelin/contracts/utils/Strings.sol#L111-L129) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Strings.sol#L116-L118)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 129
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "76956479693ac724c4a2f2ae32c1a3a870f8b948f32c68915d344d7d2c7bbee8"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(bytes32[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#459-463) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#460-462)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(bytes32[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L459-L463) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L460-L462)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 459,
                  "endLine": 463
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "806037ea436187eb916c26d073ccdaac631622a1de8d25364a5094a350f617d6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Strings.toString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#45-63) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#50-52)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#55-57)\n",
            "markdown": "[Strings.toString(uint256)](node_modules/@openzeppelin/contracts/utils/Strings.sol#L45-L63) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Strings.sol#L50-L52)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Strings.sol#L55-L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e13a29075f76f838f94ede98eaafc706d80076d031bd00f37d573f1a04b4f3c"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytesSlot(bytes) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#138-142) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#139-141)\n",
            "markdown": "[StorageSlot.getBytesSlot(bytes)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L138-L142) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L139-L141)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8fc877a96d4067319b343c0d9bd2cdbf0f95fd84f867bf804c0023402d21d0a3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveArray(bytes32) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#64-69) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#65-68)\n",
            "markdown": "[SlotDerivation.deriveArray(bytes32)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L64-L69) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L65-L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9171ad9399845f8dc5cf057bd9778ea3766c115d08f6b1a56c9c87998d56be02"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._castToUint256Array(address[]) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#180-184) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#181-183)\n",
            "markdown": "[Arrays._castToUint256Array(address[])](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L180-L184) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L181-L183)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 184
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9753502b457038467f3e8efc34d439bafbd183f4937df47ea3f6ab2e4e5f76cc"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "NAVOracleV3._recover(bytes32,bytes) (contracts/NAVOracleV3.sol#303-313) uses assembly\n\t- INLINE ASM (contracts/NAVOracleV3.sol#306-310)\n",
            "markdown": "[NAVOracleV3._recover(bytes32,bytes)](contracts/NAVOracleV3.sol#L303-L313) uses assembly\n\t- [INLINE ASM](contracts/NAVOracleV3.sol#L306-L310)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 303,
                  "endLine": 313
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9870355d022fd5ec0fd602a31c9262d13fee8b899c91a005b5c23db4623a7f62"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.mul512(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#37-46) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#41-45)\n",
            "markdown": "[Math.mul512(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L37-L46) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L41-L45)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "98a38daf187a050903d837022e875b739edc787fbc4a7747baf53e811ba118d5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(address[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#503-507) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#504-506)\n",
            "markdown": "[Arrays.unsafeSetLength(address[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L503-L507) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L504-L506)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 503,
                  "endLine": 507
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a7ee79bac0e518b792d064e4d681a892f35f513f3ef01a0e2e52710b6be4d48"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getStringSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#111-115) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#112-114)\n",
            "markdown": "[StorageSlot.getStringSlot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L111-L115) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L112-L114)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9afc2c43f065cf3fe1452981a6b55dc27c6bc95642e598da45fa226493eac6cb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(string[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#547-551) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#548-550)\n",
            "markdown": "[Arrays.unsafeSetLength(string[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L547-L551) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L548-L550)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 547,
                  "endLine": 551
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aba394584ae6e4b92b0bbda3daa2b440703bd4b106f7e1402f5b41b16f4898d4"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Strings._unsafeReadBytesOffset(bytes,uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#484-489) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#486-488)\n",
            "markdown": "[Strings._unsafeReadBytesOffset(bytes,uint256)](node_modules/@openzeppelin/contracts/utils/Strings.sol#L484-L489) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Strings.sol#L486-L488)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 484,
                  "endLine": 489
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "af562e08a99713c27f4d15dceb1d0171c647169b24ea8937170f6883fe5f7d48"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._swap(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#170-177) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#171-176)\n",
            "markdown": "[Arrays._swap(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L170-L177) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L171-L176)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 170,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b61edd35b44510b90f6464c2b78e550012540b8df4632db85792e4bceed785e6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,string) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#129-139) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#130-138)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,string)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L129-L139) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L130-L138)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 139
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b94b12995e1c69b74910033b8f8c4727c3f1b58578480c43843a761cb2ba4d21"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._mload(uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#161-165) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#162-164)\n",
            "markdown": "[Arrays._mload(uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L161-L165) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L162-L164)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 165
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bca962b5da286d5ccd550fc9c25576c1c4413bec5924b44777fe82e9011856ce"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.log2(uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#612-651) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#648-650)\n",
            "markdown": "[Math.log2(uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L612-L651) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L648-L650)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 612,
                  "endLine": 651
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bcf77543398db6517f671d5853fc727bac283727a7180b3084f18a05ad072d90"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(uint256[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#525-529) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#526-528)\n",
            "markdown": "[Arrays.unsafeSetLength(uint256[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L525-L529) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L526-L528)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 525,
                  "endLine": 529
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd0f4864634e0acd6ddad0affbf7dfd3b3e44ca17c4c8eb4f951bf130dc6b8ae"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#96-102) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#97-101)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,bytes32)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L96-L102) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L97-L101)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "beef93b7a62dc9fb31f18b0b17aa689678d48b7e54eaf489571a7cb00fd39ac8"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getStringSlot(string) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#120-124) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#121-123)\n",
            "markdown": "[StorageSlot.getStringSlot(string)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L120-L124) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L121-L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 124
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c242b16f9d7ba2c0f8be576b5fc71ae1951eea16908028f4cd35e032f919a8e5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._begin(uint256[]) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#142-146) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#143-145)\n",
            "markdown": "[Arrays._begin(uint256[])](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L142-L146) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L143-L145)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 142,
                  "endLine": 146
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3da5508380e35399d98e8fc26e9f4c54da3e62bd36717fa8923a0735953c6a5"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryMul(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#73-84) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#76-80)\n",
            "markdown": "[Math.tryMul(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L73-L84) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L76-L80)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c9b577be3ced93f22739fffdb6412c478ac11ba4fbfb832a24f271848789988b"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._castToUint256Comp(function(address,address) returns(bool)) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#194-200) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#197-199)\n",
            "markdown": "[Arrays._castToUint256Comp(function(address,address) returns(bool))](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L194-L200) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L197-L199)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 200
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ccf5c6ed74f1c74e62bfcfd131c7d8cb43fed6c7311ecc6df4793dab2821f915"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryMod(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102-110) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#105-108)\n",
            "markdown": "[Math.tryMod(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102-L110) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L105-L108)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 110
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d157c527fb903d6284db1c35ee7cf183db1be54b3e53913f3390c37f30279328"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryModExp(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#409-433) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#411-432)\n",
            "markdown": "[Math.tryModExp(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L409-L433) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L411-L432)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 409,
                  "endLine": 433
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4318b56c437eeba9d6e9e029d17fbb0f2a9df441b46ce99a9a041213a6b7091"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.tryDiv(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#89-97) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#92-95)\n",
            "markdown": "[Math.tryDiv(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L89-L97) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L92-L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4fee22f13e59a3fe9db6750252db29a47d4fdb32128fb1942827c0910e4a97e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlot.getBytesSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#129-133) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#130-132)\n",
            "markdown": "[StorageSlot.getBytesSlot(bytes32)](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L129-L133) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L130-L132)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 133
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d78e7e85e12d6bdb74bebffb61bcb33e173d4336ea4af18ae3bd87951c3eef33"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(address[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#448-452) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#449-451)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(address[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L448-L452) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L449-L451)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 448,
                  "endLine": 452
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d84a6adbece158298ff323c62592820670f922614365aab1030a46fe819af7b4"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,uint256) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#107-113) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#108-112)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,uint256)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L107-L113) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L108-L112)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 113
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e0c01184cd0f973029b5ffb3c7d6c3654d89bb577dec5adeea6d8a72a7419783"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SafeERC20._callOptionalReturn(IERC20,bytes) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#173-191) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#176-186)\n",
            "markdown": "[SafeERC20._callOptionalReturn(IERC20,bytes)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L173-L191) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L176-L186)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 191
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e33f785d9aba7249e9ee500ebca265dd99dc07b707a45bc02b2097d7f4cae1df"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC1155Utils.checkOnERC1155Received(address,address,address,uint256,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#25-50) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#44-46)\n",
            "markdown": "[ERC1155Utils.checkOnERC1155Received(address,address,address,uint256,uint256,bytes)](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L25-L50) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L44-L46)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e5c42f1767b2fb783361086c979347b4e16a39499a658f529b6b9714d4e3ce4e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeMemoryAccess(uint256[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#470-474) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#471-473)\n",
            "markdown": "[Arrays.unsafeMemoryAccess(uint256[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L470-L474) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L471-L473)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 470,
                  "endLine": 474
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9571a20df2361fbd18bc01ecfc0fa26f2de255110fd64f57c99564bd559d84c"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays.unsafeSetLength(bytes[],uint256) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#536-540) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#537-539)\n",
            "markdown": "[Arrays.unsafeSetLength(bytes[],uint256)](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L536-L540) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L537-L539)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 536,
                  "endLine": 540
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9a4a56b0b60c07c6c41982899c7fbdb235cb9f930acb7564b7487245dca4eeb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SlotDerivation.deriveMapping(bytes32,int256) (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#118-124) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#119-123)\n",
            "markdown": "[SlotDerivation.deriveMapping(bytes32,int256)](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L118-L124) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L119-L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 124
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eef1873b7c0c8bf657b5d83e205a6a8a3ae41447af3ea4cab0c54f0cd620111e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._castToUint256Comp(function(bytes32,bytes32) returns(bool)) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#203-209) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#206-208)\n",
            "markdown": "[Arrays._castToUint256Comp(function(bytes32,bytes32) returns(bool))](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L203-L209) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L206-L208)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f025e70799e79ea2829b8c65b6f8347ad6485edf56519fa840628dc1e1d8573c"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.add512(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#25-30) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#26-29)\n",
            "markdown": "[Math.add512(uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L25-L30) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L26-L29)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2906f6dc51a3ca6ec6db0c163e036667be25739e938918f805dd4954be968d7"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Arrays._castToUint256Array(bytes32[]) (node_modules/@openzeppelin/contracts/utils/Arrays.sol#187-191) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Arrays.sol#188-190)\n",
            "markdown": "[Arrays._castToUint256Array(bytes32[])](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L187-L191) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L188-L190)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Arrays.sol"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 191
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f4f738b0cde59ef8b1cab287f9b8d1ac1337448bf28d9f9978670ed0cbc3ebc9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC1155._asSingletonArrays(uint256,uint256) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#368-388) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#372-387)\n",
            "markdown": "[ERC1155._asSingletonArrays(uint256,uint256)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L368-L388) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L372-L387)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol"
                },
                "region": {
                  "startLine": 368,
                  "endLine": 388
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffea0699ffa9a44d5e42dec24bc22e4dd34527e9dc4fd10a42ea3936b3894a67"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "6 different versions of Solidity are used:\n\t- Version constraint ^0.8.20 is used by:\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Arrays.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Comparators.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Panic.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Pausable.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#4)\n\t- Version constraint >=0.8.4 is used by:\n\t\t->=0.8.4 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)\n\t\t->=0.8.4 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)\n\t- Version constraint >=0.6.2 is used by:\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)\n\t- Version constraint >=0.4.16 is used by:\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)\n\t- Version constraint >=0.5.0 is used by:\n\t\t->=0.5.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)\n\t- Version constraint ^0.8.24 is used by:\n\t\t-^0.8.24 (contracts/BRICSToken.sol#2)\n\t\t-^0.8.24 (contracts/ClaimRegistry.sol#2)\n\t\t-^0.8.24 (contracts/ConfigRegistry.sol#2)\n\t\t-^0.8.24 (contracts/IssuanceControllerV3.sol#2)\n\t\t-^0.8.24 (contracts/MemberRegistry.sol#2)\n\t\t-^0.8.24 (contracts/MezzanineVault.sol#2)\n\t\t-^0.8.24 (contracts/NAVOracleV3.sol#2)\n\t\t-^0.8.24 (contracts/OperationalAgreement.sol#2)\n\t\t-^0.8.24 (contracts/PreTrancheBuffer.sol#2)\n\t\t-^0.8.24 (contracts/RedemptionClaim.sol#2)\n\t\t-^0.8.24 (contracts/SovereignClaimToken.sol#2)\n\t\t-^0.8.24 (contracts/TrancheManagerV2.sol#2)\n\t\t-^0.8.24 (contracts/Treasury.sol#2)\n\t\t-^0.8.24 (contracts/malicious/MalRedemptionClaim.sol#2)\n\t\t-^0.8.24 (contracts/malicious/MalUSDC.sol#2)\n\t\t-^0.8.24 (contracts/mocks/MalTreasury.sol#2)\n\t\t-^0.8.24 (contracts/mocks/MockNAVOracle.sol#2)\n\t\t-^0.8.24 (contracts/mocks/MockUSDC.sol#2)\n",
            "markdown": "6 different versions of Solidity are used:\n\t- Version constraint ^0.8.20 is used by:\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Comparators.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Panic.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Pausable.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Strings.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#L4)\n\t- Version constraint >=0.8.4 is used by:\n\t\t-[>=0.8.4](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4)\n\t\t-[>=0.8.4](node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#L3)\n\t- Version constraint >=0.6.2 is used by:\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#L4)\n\t- Version constraint >=0.4.16 is used by:\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4)\n\t- Version constraint >=0.5.0 is used by:\n\t\t-[>=0.5.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#L4)\n\t- Version constraint ^0.8.24 is used by:\n\t\t-[^0.8.24](contracts/BRICSToken.sol#L2)\n\t\t-[^0.8.24](contracts/ClaimRegistry.sol#L2)\n\t\t-[^0.8.24](contracts/ConfigRegistry.sol#L2)\n\t\t-[^0.8.24](contracts/IssuanceControllerV3.sol#L2)\n\t\t-[^0.8.24](contracts/MemberRegistry.sol#L2)\n\t\t-[^0.8.24](contracts/MezzanineVault.sol#L2)\n\t\t-[^0.8.24](contracts/NAVOracleV3.sol#L2)\n\t\t-[^0.8.24](contracts/OperationalAgreement.sol#L2)\n\t\t-[^0.8.24](contracts/PreTrancheBuffer.sol#L2)\n\t\t-[^0.8.24](contracts/RedemptionClaim.sol#L2)\n\t\t-[^0.8.24](contracts/SovereignClaimToken.sol#L2)\n\t\t-[^0.8.24](contracts/TrancheManagerV2.sol#L2)\n\t\t-[^0.8.24](contracts/Treasury.sol#L2)\n\t\t-[^0.8.24](contracts/malicious/MalRedemptionClaim.sol#L2)\n\t\t-[^0.8.24](contracts/malicious/MalUSDC.sol#L2)\n\t\t-[^0.8.24](contracts/mocks/MalTreasury.sol#L2)\n\t\t-[^0.8.24](contracts/mocks/MockNAVOracle.sol#L2)\n\t\t-[^0.8.24](contracts/mocks/MockUSDC.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "884c2963d76daf43265c51f6435ff1282b00949f6bf119b54c45d1bb39d4ef65"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "5 different versions of Solidity are used:\n\t- Version constraint ^0.8.20 is used by:\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Arrays.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Comparators.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Panic.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Pausable.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)\n\t\t-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)\n\t- Version constraint >=0.8.4 is used by:\n\t\t->=0.8.4 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)\n\t\t->=0.8.4 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)\n\t- Version constraint >=0.6.2 is used by:\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#4)\n\t\t->=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)\n\t- Version constraint >=0.4.16 is used by:\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t\t->=0.4.16 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)\n\t- Version constraint ^0.8.24 is used by:\n\t\t-^0.8.24 (contracts/BRICSToken.sol#2)\n\t\t-^0.8.24 (contracts/ClaimRegistry.sol#2)\n\t\t-^0.8.24 (contracts/ConfigRegistry.sol#2)\n\t\t-^0.8.24 (contracts/IssuanceControllerV3.sol#2)\n\t\t-^0.8.24 (contracts/MemberRegistry.sol#2)\n\t\t-^0.8.24 (contracts/OperationalAgreement.sol#2)\n\t\t-^0.8.24 (contracts/PreTrancheBuffer.sol#2)\n\t\t-^0.8.24 (contracts/RedemptionClaim.sol#2)\n\t\t-^0.8.24 (contracts/TrancheManagerV2.sol#2)\n\t\t-^0.8.24 (contracts/Treasury.sol#2)\n",
            "markdown": "5 different versions of Solidity are used:\n\t- Version constraint ^0.8.20 is used by:\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Comparators.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Panic.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/Pausable.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L5)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L4)\n\t\t-[^0.8.20](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L5)\n\t- Version constraint >=0.8.4 is used by:\n\t\t-[>=0.8.4](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4)\n\t\t-[>=0.8.4](node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#L3)\n\t- Version constraint >=0.6.2 is used by:\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#L4)\n\t\t-[>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4)\n\t- Version constraint >=0.4.16 is used by:\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t\t-[>=0.4.16](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4)\n\t- Version constraint ^0.8.24 is used by:\n\t\t-[^0.8.24](contracts/BRICSToken.sol#L2)\n\t\t-[^0.8.24](contracts/ClaimRegistry.sol#L2)\n\t\t-[^0.8.24](contracts/ConfigRegistry.sol#L2)\n\t\t-[^0.8.24](contracts/IssuanceControllerV3.sol#L2)\n\t\t-[^0.8.24](contracts/MemberRegistry.sol#L2)\n\t\t-[^0.8.24](contracts/OperationalAgreement.sol#L2)\n\t\t-[^0.8.24](contracts/PreTrancheBuffer.sol#L2)\n\t\t-[^0.8.24](contracts/RedemptionClaim.sol#L2)\n\t\t-[^0.8.24](contracts/TrancheManagerV2.sol#L2)\n\t\t-[^0.8.24](contracts/Treasury.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e45e268a692865aa05f0c9a34611e85c61045cada571fdbdf54f4355c1a93c15"
          }
        },
        {
          "ruleId": "3-0-cyclomatic-complexity",
          "message": {
            "text": "IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes) (contracts/IssuanceControllerV3.sol#702-796) has a high cyclomatic complexity (17).\n",
            "markdown": "[IssuanceControllerV3.mintForSigned(address,uint256,uint256,uint256,bytes32,uint256,bytes)](contracts/IssuanceControllerV3.sol#L702-L796) has a high cyclomatic complexity (17).\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 702,
                  "endLine": 796
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "26e1b08afe9d319770bcdb638823abd0472d5a4d77faaf07c6b958343ee1312c"
          }
        },
        {
          "ruleId": "3-0-cyclomatic-complexity",
          "message": {
            "text": "IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32) (contracts/IssuanceControllerV3.sol#798-871) has a high cyclomatic complexity (15).\n",
            "markdown": "[IssuanceControllerV3.mintFor(address,uint256,uint256,uint256,bytes32)](contracts/IssuanceControllerV3.sol#L798-L871) has a high cyclomatic complexity (15).\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 798,
                  "endLine": 871
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e0652eb6a3008f9735679ec883f1ad72c0108aa333446031808edf83608df8e2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.4.16 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- ABIEncoderV2StorageArrayWithMultiSlotElement\n\t- DynamicConstructorArgumentsClippedABIV2\n\t- UninitializedFunctionPointerInConstructor_0.4.x\n\t- IncorrectEventSignatureInLibraries_0.4.x\n\t- ExpExponentCleanup\n\t- NestedArrayFunctionCallDecoder\n\t- ZeroFunctionSelector.\nIt is used by:\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#4)\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#4)\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t- >=0.4.16 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)\n",
            "markdown": "Version constraint >=0.4.16 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- ABIEncoderV2StorageArrayWithMultiSlotElement\n\t- DynamicConstructorArgumentsClippedABIV2\n\t- UninitializedFunctionPointerInConstructor_0.4.x\n\t- IncorrectEventSignatureInLibraries_0.4.x\n\t- ExpExponentCleanup\n\t- NestedArrayFunctionCallDecoder\n\t- ZeroFunctionSelector.\nIt is used by:\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#L4)\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/interfaces/IERC20.sol#L4)\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t- [>=0.4.16](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/interfaces/IERC165.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "47c32fe9f1a6d12ef0c32c32a7856d9c217fc0e978a2807403107f5117f52b7c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- ABIEncoderV2StorageArrayWithMultiSlotElement\n\t- DynamicConstructorArgumentsClippedABIV2\n\t- UninitializedFunctionPointerInConstructor\n\t- IncorrectEventSignatureInLibraries\n\t- ABIEncoderV2PackedStorage.\nIt is used by:\n\t- >=0.5.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)\n",
            "markdown": "Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- DirtyBytesArrayToStorage\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow\n\t- privateCanBeOverridden\n\t- SignedArrayStorageCopy\n\t- ABIEncoderV2StorageArrayWithMultiSlotElement\n\t- DynamicConstructorArgumentsClippedABIV2\n\t- UninitializedFunctionPointerInConstructor\n\t- IncorrectEventSignatureInLibraries\n\t- ABIEncoderV2PackedStorage.\nIt is used by:\n\t- [>=0.5.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "53d515829c16e62ad09c6073f6a04120244aaea4267b14c74303514b45295944"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess.\nIt is used by:\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Arrays.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Comparators.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Panic.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Pausable.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#4)\n",
            "markdown": "Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess.\nIt is used by:\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Comparators.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Panic.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Pausable.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Strings.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6acba8e4577cc50fb1f592278bcd8313219db2acbfa616dfa1d127720f6124c9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- DataLocationChangeInInternalOverride\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- SignedImmutables.\nIt is used by:\n\t- >=0.8.4 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)\n\t- >=0.8.4 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)\n",
            "markdown": "Version constraint >=0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- DataLocationChangeInInternalOverride\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- SignedImmutables.\nIt is used by:\n\t- [>=0.8.4](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4)\n\t- [>=0.8.4](node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#L3)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/IAccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b04f785005687357fb439bc74756a3dbf6bb82e6b89b609ea7a29ac458b80352"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- MissingEscapingInFormatting\n\t- ArraySliceDynamicallyEncodedBaseType\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow.\nIt is used by:\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)\n",
            "markdown": "Version constraint >=0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- MissingEscapingInFormatting\n\t- ArraySliceDynamicallyEncodedBaseType\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow.\nIt is used by:\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e46f36a9f625ca0442f26b25279ce829b2c50b5e4f6f586a661160cb09b3fdea"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess.\nIt is used by:\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Arrays.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Comparators.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Panic.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Pausable.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)\n\t- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)\n",
            "markdown": "Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- VerbatimInvalidDeduplication\n\t- FullInlinerNonExpressionSplitArgumentEvaluationOrder\n\t- MissingSideEffectsOnSelectorAccess.\nIt is used by:\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Arrays.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Comparators.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Panic.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/Pausable.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/SlotDerivation.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#L5)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L4)\n\t- [^0.8.20](node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#L5)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ab7bf08d5239ed4420c7cb359cb3139c2e0f960a98e142cab02f89b6fe9b057"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Version constraint >=0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- MissingEscapingInFormatting\n\t- ArraySliceDynamicallyEncodedBaseType\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow.\nIt is used by:\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#4)\n\t- >=0.6.2 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)\n",
            "markdown": "Version constraint >=0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)\n\t- MissingSideEffectsOnSelectorAccess\n\t- AbiReencodingHeadOverflowWithStaticArrayCleanup\n\t- DirtyBytesArrayToStorage\n\t- NestedCalldataArrayAbiReencodingSizeValidation\n\t- ABIDecodeTwoDimensionalArrayMemory\n\t- KeccakCaching\n\t- EmptyByteArrayCopy\n\t- DynamicArrayCleanup\n\t- MissingEscapingInFormatting\n\t- ArraySliceDynamicallyEncodedBaseType\n\t- ImplicitConstructorCallvalueCheck\n\t- TupleAssignmentMultiStackSlotComponents\n\t- MemoryArrayCreationOverflow.\nIt is used by:\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol#L4)\n\t- [>=0.6.2](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ba788c0f05557385ea623453dd85aa0e8850492335182ef87fb011067c4584a9"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in MalRedemptionClaim.settleAndBurn(uint256,address) (contracts/malicious/MalRedemptionClaim.sol#46-62):\n\t- (callSuccess,None) = targetContract.call(reentrantCall) (contracts/malicious/MalRedemptionClaim.sol#56)\n",
            "markdown": "Low level call in [MalRedemptionClaim.settleAndBurn(uint256,address)](contracts/malicious/MalRedemptionClaim.sol#L46-L62):\n\t- [(callSuccess,None) = targetContract.call(reentrantCall)](contracts/malicious/MalRedemptionClaim.sol#L56)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalRedemptionClaim.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1337743a88da66657bf05bb2e00f850557367f79e60bc3cac75147b9a82b3fc5"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in ERC4626._tryGetAssetDecimals(IERC20) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol#86-97):\n\t- (success,encodedDecimals) = address(asset_).staticcall(abi.encodeCall(IERC20Metadata.decimals,())) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol#87-89)\n",
            "markdown": "Low level call in [ERC4626._tryGetAssetDecimals(IERC20)](node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol#L86-L97):\n\t- [(success,encodedDecimals) = address(asset_).staticcall(abi.encodeCall(IERC20Metadata.decimals,()))](node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol#L87-L89)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "26ecd32ac1de98cb7c64f66b75c6aef3fe934d258764a3404e8ce5868ec477b7"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in MalUSDC.transferFrom(address,address,uint256) (contracts/malicious/MalUSDC.sol#30-41):\n\t- (callSuccess,None) = targetContract.call(reentrantCall) (contracts/malicious/MalUSDC.sol#36)\n",
            "markdown": "Low level call in [MalUSDC.transferFrom(address,address,uint256)](contracts/malicious/MalUSDC.sol#L30-L41):\n\t- [(callSuccess,None) = targetContract.call(reentrantCall)](contracts/malicious/MalUSDC.sol#L36)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalUSDC.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e36796f9c7f80955f98168d845ebbefba709b3fe9195c1558e7ec56b1c9cb0bc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MalUSDC.setReentrantTarget(address,bytes)._call (contracts/malicious/MalUSDC.sol#21) is not in mixedCase\n",
            "markdown": "Parameter [MalUSDC.setReentrantTarget(address,bytes)._call](contracts/malicious/MalUSDC.sol#L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalUSDC.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "06b459dd05eaa5303e2d76fee3dbdf57c6c6b0d8139afb7661769ab7ceaaf0a6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockNAVOracle.setNAV(uint256)._navRay (contracts/mocks/MockNAVOracle.sol#18) is not in mixedCase\n",
            "markdown": "Parameter [MockNAVOracle.setNAV(uint256)._navRay](contracts/mocks/MockNAVOracle.sol#L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockNAVOracle.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1de3004200431ffcdafb1e6f53d2614940a8c6b002bf0d9896c6046dcf52fa04"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MalRedemptionClaim.setReentrantTarget(address,bytes)._target (contracts/malicious/MalRedemptionClaim.sol#30) is not in mixedCase\n",
            "markdown": "Parameter [MalRedemptionClaim.setReentrantTarget(address,bytes)._target](contracts/malicious/MalRedemptionClaim.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalRedemptionClaim.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "322e600a0158c2eb0a94ab30db1f8abdb9417bb337876038bbddb58ad5583570"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MalUSDC.setReentrantTarget(address,bytes)._target (contracts/malicious/MalUSDC.sol#21) is not in mixedCase\n",
            "markdown": "Parameter [MalUSDC.setReentrantTarget(address,bytes)._target](contracts/malicious/MalUSDC.sol#L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalUSDC.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7ba5a67e0988c3077eb384ea7d25be418aae14d36fbe467874bd65cd304959cb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MalUSDC.setShouldReenter(bool)._should (contracts/malicious/MalUSDC.sol#26) is not in mixedCase\n",
            "markdown": "Parameter [MalUSDC.setShouldReenter(bool)._should](contracts/malicious/MalUSDC.sol#L26) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalUSDC.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7cfc8f31ff47a058ecec47721264f95e7cbc159c05d9a0fcced112e1f84118d9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable NAVOracleV3._DOMAIN_SEPARATOR (contracts/NAVOracleV3.sol#32) is not in mixedCase\n",
            "markdown": "Variable [NAVOracleV3._DOMAIN_SEPARATOR](contracts/NAVOracleV3.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad3bccf16f7a8e7f310e099dee055acd4aa2fc8426cb6125cc82705ebf95cff6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MalRedemptionClaim.setShouldReenter(bool)._should (contracts/malicious/MalRedemptionClaim.sol#35) is not in mixedCase\n",
            "markdown": "Parameter [MalRedemptionClaim.setShouldReenter(bool)._should](contracts/malicious/MalRedemptionClaim.sol#L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalRedemptionClaim.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b536832a5513c80fc1b79031b832a94bfa0df16607644e6180e1760b70872c99"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter TrancheManagerV2.setClaimRegistry(address)._claimRegistry (contracts/TrancheManagerV2.sol#73-74) is not in mixedCase\n",
            "markdown": "Parameter [TrancheManagerV2.setClaimRegistry(address)._claimRegistry](contracts/TrancheManagerV2.sol#L73-L74) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 74
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c208629eb953991482297bb7a59864ad82d43cca25bfdd515522b4c81a6b3ef0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockNAVOracle.setDegradationMode(bool)._degradationMode (contracts/mocks/MockNAVOracle.sol#23) is not in mixedCase\n",
            "markdown": "Parameter [MockNAVOracle.setDegradationMode(bool)._degradationMode](contracts/mocks/MockNAVOracle.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockNAVOracle.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3b570ab1846844c944693d3cdc5ceea92375b035d093e87b7a8eb46eac09dfc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MalRedemptionClaim.setReentrantTarget(address,bytes)._call (contracts/malicious/MalRedemptionClaim.sol#30) is not in mixedCase\n",
            "markdown": "Parameter [MalRedemptionClaim.setReentrantTarget(address,bytes)._call](contracts/malicious/MalRedemptionClaim.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalRedemptionClaim.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "df4dcd3a313ddd4ca0821efdf3384b8cafa23d70e953ec5724d4a2024f83573b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable IssuanceControllerV3._DOMAIN_SEPARATOR (contracts/IssuanceControllerV3.sol#50) is not in mixedCase\n",
            "markdown": "Variable [IssuanceControllerV3._DOMAIN_SEPARATOR](contracts/IssuanceControllerV3.sol#L50) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f93be120413a3a35aa3098d1e730faa8bb0dc43e13f1aca2c5afa3d8ef0e68c7"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "MalUSDC.constructor() (contracts/malicious/MalUSDC.sol#17-19) uses literals with too many digits:\n\t- _mint(msg.sender,1000000 * 10 ** 6) (contracts/malicious/MalUSDC.sol#18)\n",
            "markdown": "[MalUSDC.constructor()](contracts/malicious/MalUSDC.sol#L17-L19) uses literals with too many digits:\n\t- [_mint(msg.sender,1000000 * 10 ** 6)](contracts/malicious/MalUSDC.sol#L18)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/malicious/MalUSDC.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5110434a63a5d0d00416e7675dfacabb8d6a083d6d55409d732ca9db5074ff26"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Math.log2(uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#612-651) uses literals with too many digits:\n\t- r = r | byte(uint256,uint256)(x >> r,0x0000010102020202030303030303030300000000000000000000000000000000) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#649)\n",
            "markdown": "[Math.log2(uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L612-L651) uses literals with too many digits:\n\t- [r = r | byte(uint256,uint256)(x >> r,0x0000010102020202030303030303030300000000000000000000000000000000)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L649)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 612,
                  "endLine": 651
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c0058e8e0ebe9a88b5c491139a8d4df04b051acd8fe32b27078947f548e7c7d"
          }
        },
        {
          "ruleId": "4-0-cache-array-length",
          "message": {
            "text": "Loop condition i < sovereignList.length (contracts/ConfigRegistry.sol#167) should use cached array length instead of referencing `length` member of the storage array.\n ",
            "markdown": "Loop condition [i < sovereignList.length](contracts/ConfigRegistry.sol#L167) should use cached array length instead of referencing `length` member of the storage array.\n "
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConfigRegistry.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4cc374b6443eb84c0bfb0cee975292ec16556cb5a1e211fa5c3989c452a08fe1"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "IssuanceControllerV3.windowMinDuration (contracts/IssuanceControllerV3.sol#111) should be constant \n",
            "markdown": "[IssuanceControllerV3.windowMinDuration](contracts/IssuanceControllerV3.sol#L111) should be constant \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "532baf2b4722fb4428ec62c1118b941a136c877c9168e9d3fbcd8f10c0551566"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "RedemptionClaim.freezeSecs (contracts/RedemptionClaim.sol#30) should be constant \n",
            "markdown": "[RedemptionClaim.freezeSecs](contracts/RedemptionClaim.sol#L30) should be constant \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/RedemptionClaim.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9222921dc6b19663690d4887deaf301a1a4c6481db2a446a845262d2d10ae23c"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "TrancheManagerV2.supermajorityThreshold (contracts/TrancheManagerV2.sol#45) should be constant \n",
            "markdown": "[TrancheManagerV2.supermajorityThreshold](contracts/TrancheManagerV2.sol#L45) should be constant \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/TrancheManagerV2.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "959d6f74d7efc288973c708a34cae867cca2cad689adf22636ce6723b69181a2"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "NAVOracleV3._DOMAIN_SEPARATOR (contracts/NAVOracleV3.sol#32) should be immutable \n",
            "markdown": "[NAVOracleV3._DOMAIN_SEPARATOR](contracts/NAVOracleV3.sol#L32) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "04e0119bcac09f9b29a55f70fe84251a2443f64b2a7a7b416bdfb060e7b8a7c4"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.preBuffer (contracts/IssuanceControllerV3.sol#61) should be immutable \n",
            "markdown": "[IssuanceControllerV3.preBuffer](contracts/IssuanceControllerV3.sol#L61) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "07f7c08260243840ce73f1f2cca579308c85d9fc2cf93bf1f9526b087729085b"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3._DOMAIN_SEPARATOR (contracts/IssuanceControllerV3.sol#50) should be immutable \n",
            "markdown": "[IssuanceControllerV3._DOMAIN_SEPARATOR](contracts/IssuanceControllerV3.sol#L50) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "12b0bec4ad45dcf48106fb9065d2d206f5a477da5d8ce4db98e97bbebd5660c6"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "OperationalAgreement.registry (contracts/OperationalAgreement.sol#15) should be immutable \n",
            "markdown": "[OperationalAgreement.registry](contracts/OperationalAgreement.sol#L15) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/OperationalAgreement.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59078f84fae4a7cebc2b21fb9b9fbc074a0261fcd206b127e9324d913ad46478"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.claims (contracts/IssuanceControllerV3.sol#60) should be immutable \n",
            "markdown": "[IssuanceControllerV3.claims](contracts/IssuanceControllerV3.sol#L60) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "68e0eb3cc01a97a8e4b985634abc6c63fb6f67ce9b1e8ac2d4f63c1f5be7c24a"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.usdc (contracts/IssuanceControllerV3.sol#58) should be immutable \n",
            "markdown": "[IssuanceControllerV3.usdc](contracts/IssuanceControllerV3.sol#L58) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7699be452f7874cca291ca9a9a50c0a299d663803e719590ec3c1fae10f227e4"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.treasury (contracts/IssuanceControllerV3.sol#59) should be immutable \n",
            "markdown": "[IssuanceControllerV3.treasury](contracts/IssuanceControllerV3.sol#L59) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9fdd288af2d2c5cff0f69820517372b961a6060025c9a1f777a0d8e7e9771920"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3._cachedChainId (contracts/IssuanceControllerV3.sol#51) should be immutable \n",
            "markdown": "[IssuanceControllerV3._cachedChainId](contracts/IssuanceControllerV3.sol#L51) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a3a7813e4bebcd08e922ca92fade4c95081e0d3f844b9051bfe98c49f7a9b10b"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "MezzanineVault.reinvestUntil (contracts/MezzanineVault.sol#18) should be immutable \n",
            "markdown": "[MezzanineVault.reinvestUntil](contracts/MezzanineVault.sol#L18) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/MezzanineVault.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "afc95308ed5d5b71e8724c5224450dcf44e3c32d79652e127c7bb13708a0e2d7"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.nextStrike (contracts/IssuanceControllerV3.sol#65) should be immutable \n",
            "markdown": "[IssuanceControllerV3.nextStrike](contracts/IssuanceControllerV3.sol#L65) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bce0e291a13d59218c355b071220cc7d720c53b7ec4e4b99fb62a40b3dbfcd05"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.claimRegistry (contracts/IssuanceControllerV3.sol#62) should be immutable \n",
            "markdown": "[IssuanceControllerV3.claimRegistry](contracts/IssuanceControllerV3.sol#L62) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d246aaea1ff8bc626d1d762a1de194f40005ff020f73477e5e54874985c25a38"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.cfg (contracts/IssuanceControllerV3.sol#56) should be immutable \n",
            "markdown": "[IssuanceControllerV3.cfg](contracts/IssuanceControllerV3.sol#L56) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e7043a7ae70343059f5f0ed4710c27cef28ebb822b8ff3ffb2af17eff205ede2"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "MezzanineVault.principalLocked (contracts/MezzanineVault.sol#19) should be immutable \n",
            "markdown": "[MezzanineVault.principalLocked](contracts/MezzanineVault.sol#L19) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/MezzanineVault.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea41313ffd95f99d0413c69586c43b249db400ac680e18e56605e375670d665b"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "NAVOracleV3._cachedChainId (contracts/NAVOracleV3.sol#33) should be immutable \n",
            "markdown": "[NAVOracleV3._cachedChainId](contracts/NAVOracleV3.sol#L33) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/NAVOracleV3.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f26351749d45b29976b5b3bbb19b7effe91f830f6d9f8f4996f74fc1a345a494"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.oracle (contracts/IssuanceControllerV3.sol#57) should be immutable \n",
            "markdown": "[IssuanceControllerV3.oracle](contracts/IssuanceControllerV3.sol#L57) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2c62af904969c8b98489471952e438da0088d04dce2534c3608f558b959795d"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.tm (contracts/IssuanceControllerV3.sol#55) should be immutable \n",
            "markdown": "[IssuanceControllerV3.tm](contracts/IssuanceControllerV3.sol#L55) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f581a51313630389ebda7d206b568bb1d41231faac7b8af75740f5d3e90deb1b"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "IssuanceControllerV3.token (contracts/IssuanceControllerV3.sol#54) should be immutable \n",
            "markdown": "[IssuanceControllerV3.token](contracts/IssuanceControllerV3.sol#L54) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/IssuanceControllerV3.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f877d00b9a04ddbcac1e9b8afcd96ba361a481c88623f923ab10b8969054b5ec"
          }
        }
      ]
    }
  ]
}