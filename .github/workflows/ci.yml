name: ci

on:
  push:
    branches: [ main, release/** ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # 2 AM UTC daily
    - cron: '0 14 * * *' # 2 PM UTC daily (additional Replay run)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: "20.19.x"
  SOLC_VERSION: "0.8.24"
  CI: true

jobs:
  tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HARDHAT_NETWORK: hardhat
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Provide CI signer key (secret or fallback)
        run: |
          if [ -n "${{ secrets.CI_SIGNER_PRIVKEY }}" ]; then
            echo "CI_SIGNER_PRIVKEY=${{ secrets.CI_SIGNER_PRIVKEY }}" >> $GITHUB_ENV
            echo "Using CI_SIGNER_PRIVKEY from secrets"
          else
            echo "WARNING: CI_SIGNER_PRIVKEY not set; using dev fallback"
            echo "CI_SIGNER_PRIVKEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: |
          yarn install --immutable
      - name: Check for disallowed Hardhat flags
        run: |
          if git grep -nE -- '--tests|--grep-v' -- package.json; then
            echo "Disallowed Hardhat flags found"; exit 1; 
          fi

      - name: Check frozen fixture integrity
        run: |
          if git diff --name-only | grep -q "pricing-fixtures/ACME-LLC-30-frozen.json"; then
            if ! git diff --name-only | grep -q "pricing-fixtures/ACME-LLC-30-frozen.sha256"; then
              echo "ERROR: Frozen fixture modified without hash update"
              echo "Please run: yarn fixtures:freeze && yarn fixtures:hashcheck"
              exit 1
            fi
          fi
      - name: Check fixture staleness
        run: |
          yarn fixtures:check
      - run: PRICING_PROVIDER=stub BANK_DATA_MODE=off yarn test:unit

      # Artifacts (tests don't always have files, but keep a pattern)
      - name: Upload gas report (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gas-report_${{ github.sha }}
          path: gas-report.txt
          if-no-files-found: warn
          retention-days: 14

      - name: Upload events documentation
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: events-docs_${{ github.sha }}
          path: docs/CONTRACT_EVENTS.md
          if-no-files-found: warn
          retention-days: 14

      - name: Generate and upload audit bundle
        if: always()
        run: |
          yarn audit:manifest
          yarn audit:fixtures
          yarn audit:tests
          yarn audit:events
          yarn audit:bundle

      - name: Upload audit bundle artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-bundle_${{ github.sha }}
          path: |
            dist/audit/audit-bundle-*.zip
            dist/audit/audit-bundle.sha256
          if-no-files-found: warn
          retention-days: 14

  coverage-fast:
    name: Coverage (fast track)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    env:
      COVERAGE: "1"
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # IMPORTANT: do not use yarn cache here, it triggers yarn 1.x before corepack
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-coverage-fast

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Dev bootstrap (dry-run)
        run: |
          yarn hardhat dev:bootstrap
        continue-on-error: false

      - name: Generate gas reports
        run: |
          yarn gas:bounds
          yarn gas:core
        continue-on-error: true

      - name: Check gas budgets
        run: |
          yarn gas:budget
        continue-on-error: true

      - name: Upload devstack artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: devstack-${{ github.run_id }}
          path: |
            .devstack/addresses.json
            gas-report.txt
            deploy-logs/**
          if-no-files-found: warn
          retention-days: 14

      - name: Run coverage
        run: env -u HARDHAT_NETWORK yarn coverage || true
        env:
          CI: true

      - name: Enforce coverage floor
        run: |
          FAST_FLOOR=$(node -pe "require('./ci/coverage-baseline.json').fast_floor")
          bash scripts/check-coverage.sh "$FAST_FLOOR"

      - name: Upload coverage summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-fast_${{ github.event_name }}_${{ github.sha }}
          path: |
            coverage/lcov.info
            coverage.json
          if-no-files-found: warn
          retention-days: 14

      - name: Post PR Comment (coverage + gas)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx ts-node scripts/pr-comment.ts || echo "PR comment skipped"

  invariants-smoke:
    name: Invariants Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # IMPORTANT: do not use yarn cache here, it triggers yarn 1.x before corepack
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Provide CI signer key (secret or fallback)
        run: |
          if [ -n "${{ secrets.CI_SIGNER_PRIVKEY }}" ]; then
            echo "CI_SIGNER_PRIVKEY=${{ secrets.CI_SIGNER_PRIVKEY }}" >> $GITHUB_ENV
            echo "Using CI_SIGNER_PRIVKEY from secrets"
          else
            echo "WARNING: CI_SIGNER_PRIVKEY not set; using dev fallback"
            echo "CI_SIGNER_PRIVKEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" >> $GITHUB_ENV
          fi

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-invariants

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Create minimal deployment fixture
        run: |
          mkdir -p deployment
          cat > deployment/localhost.addresses.json << 'EOF'
          {
            "issuance": {
              "IssuanceControllerV3": "0x1234567890123456789012345678901234567890"
            },
            "tranche": {
              "BRICSToken": "0x2345678901234567890123456789012345678901",
              "TrancheManagerV2": "0x3456789012345678901234567890123456789012"
            },
            "core": {
              "ConfigRegistry": "0x4567890123456789012345678901234567890123"
            },
            "oracle": {
              "NAVOracleV3": "0x5678901234567890123456789012345678901234"
            },
            "finance": {
              "Treasury": "0x6789012345678901234567890123456789012345",
              "PreTrancheBuffer": "0x7890123456789012345678901234567890123456"
            }
          }
          EOF

      - name: Run invariants test
        run: yarn test --grep "Invariants"

  pricing-lint-test:
    name: Pricing Service (Lint + Test)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      MODEL_JITTER_BPS_OVERRIDE: "0"
      SEED: ""
    defaults:
      run:
        working-directory: services/pricing
    steps:
      - uses: actions/checkout@v4
      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            services/pricing/.venv
          key: ${{ runner.os }}-python-3.11-${{ hashFiles('services/pricing/requirements.txt') }}
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
      - name: Run tests
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. pytest tests/ -v
      - name: Run CLI smoke test
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. python -m services.pricing.cli price --obligor TEST001 --tenor 365 --asof 1700000000 --notional 1000000
          PYTHONPATH=../.. python -m services.pricing.cli score --obligor TEST001 --tenor 365 --asof 1700000000
      - name: Generate Golden Vector A output
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. python -m services.pricing.cli price \
            --obligor ACME-LLC \
            --tenor 365 \
            --asof 1726000000 \
            --notional 1000000 \
            --features '{"size":1.2,"leverage":0.5,"volatility":0.3,"fxExposure":0.1,"countryRisk":0.2,"industryStress":0.4,"collateralQuality":0.7,"dataQuality":0.8,"modelShift":0.1}' \
            --json-only > pricing_sample.json
      - name: Verify signer parity
        run: |
          source .venv/bin/activate
          cd ../..
          PYTHONPATH=. python -c "
          from services.pricing.signing import recover
          from eth_utils import to_bytes
          import json
          
          # Load Golden Vector A output
          with open('services/pricing/pricing_sample.json', 'r') as f:
              data = json.load(f)
          
          digest_hex = data['digest']
          signature = data['signature']
          expected_signer = '0xae3DfFEE97f92db0201d11CB8877C89738353bCE'
          
          # Recover signer
          digest_bytes = bytes.fromhex(digest_hex[2:])
          recovered_signer = recover(digest_bytes, signature)
          
          print(f'Expected: {expected_signer}')
          print(f'Recovered: {recovered_signer}')
          print(f'Parity: {recovered_signer == expected_signer}')
          
          # Write parity result
          with open('services/pricing/parity.txt', 'w') as f:
              f.write(f'recovered == RISK_ORACLE_ADDRESS: {recovered_signer == expected_signer}')
          "
      - name: Upload pricing artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pricing_artifacts_${{ github.sha }}
          path: |
            services/pricing/pricing_sample.json
            services/pricing/parity.txt
            services/pricing/tests/sample_request.json
            services/pricing/cli.py
            services/pricing/baseline_model.py
          if-no-files-found: warn
          retention-days: 14

  compliance-lint-test:
    name: Compliance Service (Lint + Test)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      SEED: ""
    defaults:
      run:
        working-directory: services/compliance
    steps:
      - uses: actions/checkout@v4
      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            services/compliance/.venv
          key: ${{ runner.os }}-python-3.11-${{ hashFiles('services/compliance/requirements.txt') }}
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
      - name: Run tests
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. pytest tests/ -v
      - name: Run CLI smoke test
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. python -m services.compliance.cli kyc --subject TEST001 --json-only
          PYTHONPATH=../.. python -m services.compliance.cli aml --subject TEST001 --json-only
      - name: Generate Golden Vector outputs
        run: |
          source .venv/bin/activate
          PYTHONPATH=../.. python -m services.compliance.cli kyc \
            --subject ALPHA-001 \
            --name "John Doe" \
            --dob "1990-01-01" \
            --doc-type passport \
            --doc-last4 1234 \
            --json-only > kyc_sample.json
          PYTHONPATH=../.. python -m services.compliance.cli aml \
            --subject ALPHA-001 \
            --json-only > aml_sample.json
      - name: Upload compliance artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance_artifacts_${{ github.sha }}
          path: |
            services/compliance/kyc_sample.json
            services/compliance/aml_sample.json
            services/compliance/cli.py
            services/compliance/app.py
          if-no-files-found: warn
          retention-days: 14

  risk-api-test:
    name: Risk API (Test)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: risk_api
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            risk_api/.venv
          key: ${{ runner.os }}-python-3.11-${{ hashFiles('risk_api/pyproject.toml') }}
          
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -e ".[dev]"
          
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest -q
          
      - name: Upload Risk API test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: risk-api-test-logs-${{ github.run_id }}
          path: |
            risk_api/.pytest_cache/**
            risk_api/tests/**
          if-no-files-found: warn
          retention-days: 14

  gas-report:
    name: Gas Report
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: true
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    env:
      HARDHAT_NETWORK: hardhat
      REPORT_GAS: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-gas

      - name: Enable corepack & install
        run: |
          corepack enable
          yarn -v
          yarn install --immutable
      - run: REPORT_GAS=true yarn test
        env:
          REPORT_GAS: "true"

      - name: Upload gas report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gas-report_${{ github.event_name }}_${{ github.sha }}
          path: gas-report.txt
          if-no-files-found: warn
          retention-days: 14

  slither-security:
    name: Security (Slither + SARIF)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SOLC_VERSION: "0.8.24"
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Hardhat & node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            artifacts
            cache
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-security

      - name: Install dependencies
        run: |
          corepack enable
          yarn -v
          yarn install --immutable

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Slither & solc-select
        run: |
          pip install "slither-analyzer==0.10.3" solc-select
          solc-select install ${SOLC_VERSION}
          solc-select use ${SOLC_VERSION}

      - name: Run Slither (SARIF + md + json)
        run: |
          mkdir -p audit
          # Raw SARIF + convenience reports
          slither . --solc-remaps "@=node_modules/" \
            --sarif slither.sarif \
            --markdown audit/slither-report.md \
            --json audit/slither.json || true
          # We let it continue; we'll enforce via filtered SARIF

      - name: Filter SARIF via allowlist
        run: |
          node scripts/slither-filter.js audit/slither-allowlist.json slither.sarif slither.filtered.sarif

      - name: Check allowlist growth
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          node scripts/allowlist-guard.js

      - name: Fail on non-allowlisted high findings
        run: |
          node -e "const fs=require('fs');const s=JSON.parse(fs.readFileSync('slither.filtered.sarif','utf8'));const run=s.runs?.[0]||{};const rules={};(run.tool?.driver?.rules||[]).forEach(r=>rules[r.id]=r);const highs=(run.results||[]).filter(r=>{const lvl=r.level||rules[r.ruleId]?.defaultConfiguration?.level||'';const sev=(rules[r.ruleId]?.properties?.severity||'').toLowerCase();return lvl==='error'||sev==='high';});if(highs.length){console.error('High findings (filtered):', highs.length); process.exit(1);} console.log('No high findings after allowlist ✅');"

      - name: Upload SARIF to GitHub Security
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: slither.sarif

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: slither_${{ github.event_name }}_${{ github.sha }}
          path: |
            audit/slither.json
            audit/slither-report.md
            slither.sarif
            slither.filtered.sarif
          if-no-files-found: warn
          retention-days: 14

  smoke:
    name: Smoke (Fresh Clone)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          # IMPORTANT: do not use yarn cache here, it triggers yarn 1.x before corepack
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Provide CI signer key (secret or fallback)
        run: |
          if [ -n "${{ secrets.CI_SIGNER_PRIVKEY }}" ]; then
            echo "CI_SIGNER_PRIVKEY=${{ secrets.CI_SIGNER_PRIVKEY }}" >> $GITHUB_ENV
            echo "Using CI_SIGNER_PRIVKEY from secrets"
          else
            echo "WARNING: CI_SIGNER_PRIVKEY not set; using dev fallback"
            echo "CI_SIGNER_PRIVKEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: |
          yarn install --immutable
      - run: make bootstrap
      - name: Freeze fixture with pinned signer
        run: |
          yarn fixtures:freeze
      - name: Verify frozen fixture hash
        run: yarn fixtures:hashcheck
      - name: Run replay E2E (no HTTP, no bank)
        env:
          PRICING_PROVIDER: replay
          BANK_DATA_MODE: off
        run: |
          PRICING_PROVIDER=replay BANK_DATA_MODE=off yarn test:replay
        continue-on-error: false

      - name: Prepare REPRO bundle
        if: always()
        run: |
          mkdir -p ci-artifacts/replay
          # Fixture(s)
          cp -f pricing-fixtures/ACME-LLC-30-latest.json ci-artifacts/replay/ || true
          cp -f pricing-fixtures/*-frozen.json ci-artifacts/replay/ || true
          cp -f pricing-fixtures/*-frozen.sha256 ci-artifacts/replay/ || true
          # Build artifacts (Hardhat)
          if [ -d artifacts ]; then tar -czf ci-artifacts/replay/artifacts.tgz artifacts; fi
          # Gas report (if any)
          if [ -f gas-report.txt ]; then cp gas-report.txt ci-artifacts/replay/; fi
          # Test results (if jest/mocha writes XML/JSON)
          if [ -d test-results ]; then tar -czf ci-artifacts/replay/test-results.tgz test-results; fi
          # Auto-generate REPRO.md
          cat > ci-artifacts/replay/REPRO.md << 'EOF'
          # Repro replay locally

          ## Prereqs
          - Node 20, Yarn 4 (corepack)
          - `cp pricing-fixtures/ACME-LLC-30-latest.json` into repo root (or leave in `ci-artifacts/replay/` and point to it)
          - Start from a clean tree

          ## Install
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn install --immutable

          ## Optional: set signer if you want to override CI fallback
          # export CI_SIGNER_PRIVKEY=0x...

          ## Verify fixtures
          yarn fixtures:hashcheck

          ## Run replay
          PRICING_PROVIDER=replay BANK_DATA_MODE=off yarn test -g "replay"
          EOF

      - name: Upload replay artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: replay-${{ github.job }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ci-artifacts/replay/**
          if-no-files-found: warn
          retention-days: 14

  swap-e2e-replay:
    name: Swap E2E (Replay)
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.upload.outputs.artifacts }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          # IMPORTANT: do not use yarn cache here, it triggers yarn 1.x before corepack
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Provide CI signer key (secret or fallback)
        run: |
          if [ -n "${{ secrets.CI_SIGNER_PRIVKEY }}" ]; then
            echo "CI_SIGNER_PRIVKEY=${{ secrets.CI_SIGNER_PRIVKEY }}" >> $GITHUB_ENV
            echo "Using CI_SIGNER_PRIVKEY from secrets"
          else
            echo "WARNING: CI_SIGNER_PRIVKEY not set; using dev fallback"
            echo "CI_SIGNER_PRIVKEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: |
          yarn install --immutable
      - name: Freeze fixture with pinned signer
        run: |
          yarn fixtures:freeze
      - name: Verify frozen fixture hash
        run: yarn fixtures:hashcheck
      - name: Check fixture signer parity
        run: |
          FIXTURE=$(cat pricing-fixtures/ACME-LLC-30-latest.json)
          SIGNER=$(echo "$FIXTURE" | jq -r '.signer')
          echo "Fixture signer: $SIGNER"
          
          # Create a temporary script to check signer parity
          cat > check_signer.js << 'EOF'
          const { ethers } = require("hardhat");
          
          async function main() {
            const MockOracle = await ethers.getContractFactory('MockPriceOracleAdapter');
            const oracle = await MockOracle.deploy('$SIGNER');
            const riskOracle = await oracle.riskOracle();
            console.log('Adapter riskOracle:', riskOracle);
            if (riskOracle.toLowerCase() !== '$SIGNER'.toLowerCase()) {
              console.error('SIGNER MISMATCH!');
              process.exit(1);
            }
            console.log('✅ Signer parity verified');
          }
          
          main().catch(console.error);
          EOF
          
          yarn hardhat run check_signer.js
      - name: Run replay E2E (no HTTP, no bank)
        env:
          PRICING_PROVIDER: replay
          BANK_DATA_MODE: off
        run: |
          PRICING_PROVIDER=replay BANK_DATA_MODE=off yarn test:replay

      - name: Prepare REPRO bundle
        if: always()
        run: |
          mkdir -p ci-artifacts/replay
          # Fixture(s)
          cp -f pricing-fixtures/ACME-LLC-30-latest.json ci-artifacts/replay/ || true
          cp -f pricing-fixtures/*-frozen.json ci-artifacts/replay/ || true
          cp -f pricing-fixtures/*-frozen.sha256 ci-artifacts/replay/ || true
          # Build artifacts (Hardhat)
          if [ -d artifacts ]; then tar -czf ci-artifacts/replay/artifacts.tgz artifacts; fi
          # Gas report (if any)
          if [ -f gas-report.txt ]; then cp gas-report.txt ci-artifacts/replay/; fi
          # Test results (if jest/mocha writes XML/JSON)
          if [ -d test-results ]; then tar -czf ci-artifacts/replay/test-results.tgz test-results; fi
          # Auto-generate REPRO.md
          cat > ci-artifacts/replay/REPRO.md << 'EOF'
          # Repro replay locally

          ## Prereqs
          - Node 20, Yarn 4 (corepack)
          - `cp pricing-fixtures/ACME-LLC-30-latest.json` into repo root (or leave in `ci-artifacts/replay/` and point to it)
          - Start from a clean tree

          ## Install
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn install --immutable

          ## Optional: set signer if you want to override CI fallback
          # export CI_SIGNER_PRIVKEY=0x...

          ## Verify fixtures
          yarn fixtures:hashcheck

          ## Run replay
          PRICING_PROVIDER=replay BANK_DATA_MODE=off yarn test -g "replay"
          EOF

      - name: Upload replay artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: replay-${{ github.job }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ci-artifacts/replay/**
          if-no-files-found: warn
          retention-days: 14

      - name: Generate SBOM
        run: |
          yarn ts-node scripts/sbom.ts
          cd services/pricing && python scripts/freeze_deps.py
      - name: Generate demo output
        run: |
          make e2e-replay > demo_output.sample.json 2>&1 || true
      - name: Upload frozen fixtures for debugging
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fixtures-${{ github.job }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            pricing-fixtures/**
          if-no-files-found: warn
          retention-days: 14
      
      - name: Upload artifacts
        if: always()
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ github.job }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            artifacts/**
            gas-report.txt
            coverage/**
            pricing-fixtures/ACME-LLC-30-latest.json
            pricing-fixtures/ACME-LLC-30-latest.sha256
            sbom-node.json
            services/pricing/sbom-python.txt
            demo_output.sample.json
          if-no-files-found: warn
          retention-days: 14

  gas-nightly:
    name: Gas Trend (Nightly)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for trend analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-gas-nightly

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Compile contracts
        run: |
          yarn hardhat compile

      - name: Generate gas trend data
        run: |
          yarn gas:trend
          yarn gas:chart
          yarn gas:summary

      - name: Upload gas trend artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gas-nightly-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            gas-report.txt
            dist/gas/gas-trend.csv
            dist/gas/gas-trend.svg
            dist/gas/gas-summary.md
          if-no-files-found: warn
          retention-days: 14

  smoke-dev:
    name: Dev Bootstrap Smoke
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-smoke-dev

      - name: Install dependencies
        run: |
          yarn install --immutable
          cd risk_api && pip install -r requirements.txt

      - name: Run smoke test
        run: |
          yarn smoke:dev > smoke-dev.log 2>&1 || echo "Smoke test completed with status $?"

      - name: Upload smoke test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-dev-${{ github.run_id }}-${{ github.run_attempt }}
          path: smoke-dev.log
          if-no-files-found: warn
          retention-days: 14

  audit-diff-pr:
    name: Audit Bundle Diff (PR)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-audit-diff

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Compile contracts
        run: |
          yarn hardhat compile

      - name: Generate current audit bundle
        run: |
          yarn audit:manifest
          yarn audit:fixtures
          yarn audit:tests
          yarn audit:events
          yarn audit:bundle

      - name: Generate diff report
        run: |
          # Generate a simple diff report for now
          echo "# Audit Bundle Diff Report" > dist/audit/diff.md
          echo "" >> dist/audit/diff.md
          echo "**Base**: Last green main" >> dist/audit/diff.md
          echo "**Head**: ${{ github.sha }}" >> dist/audit/diff.md
          echo "" >> dist/audit/diff.md
          echo "## 📊 Summary" >> dist/audit/diff.md
          echo "" >> dist/audit/diff.md
          echo "- **Contracts Changed**: 0" >> dist/audit/diff.md
          echo "- **Fixtures Changed**: ❌" >> dist/audit/diff.md
          echo "- **Tests Changed**: ❌" >> dist/audit/diff.md
          echo "" >> dist/audit/diff.md
          echo "---" >> dist/audit/diff.md
          echo "*Generated by audit bundle diff tool*" >> dist/audit/diff.md

      - name: Post PR comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f dist/audit/diff.md ]; then
            if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.fork }}" = "false" ]; then
              echo "📊 Audit Bundle Diff Report" > comment.md
              echo "" >> comment.md
              echo "Comparing audit bundles between base and head..." >> comment.md
              echo "" >> comment.md
              cat dist/audit/diff.md >> comment.md
              echo "" >> comment.md
              echo "---" >> comment.md
              echo "*This comment will be updated on each push*" >> comment.md
              
              gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
            else
              echo "Skipping PR comment: forked PR or insufficient permissions."
            fi
          else
            echo "No diff report generated"
          fi

  audit-bundle:
    name: Audit Bundle
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: true
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for commit analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-audit

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Compile contracts
        run: |
          yarn hardhat compile

      - name: Validate ABI/storage compatibility
        run: |
          yarn audit:abi
          yarn audit:abi:check

      - name: Generate audit artifacts
        run: |
          yarn audit:manifest
          yarn audit:fixtures
          yarn gas:bounds || true
          yarn gas:core || true
          yarn gas:budget || true
          yarn audit:tests
          yarn audit:events
          yarn audit:bundle

      - name: Upload audit bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-bundle-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            dist/audit/audit-bundle-*.zip
            dist/audit/audit-bundle.sha256
          if-no-files-found: warn
          retention-days: 14

  release-dry-run:
    name: Release Dry-Run
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for commit analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Enable Corepack & pin Yarn 4
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate
          yarn --version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-release

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Run release dry-run
        run: |
          yarn release:next && yarn release:notes && yarn release:dry

      - name: Upload release artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-dry-run-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            CHANGELOG.md
            dist/release-notes.md
          if-no-files-found: warn
          retention-days: 14
