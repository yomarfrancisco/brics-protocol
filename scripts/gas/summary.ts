#!/usr/bin/env ts-node

/**
 * Gas Summary Generator
 * 
 * Generates a summary of gas usage from gas-report.txt
 * Usage: ts-node scripts/gas/summary.ts
 */

import * as fs from 'fs';
import * as path from 'path';

interface GasFunction {
  contract: string;
  method: string;
  avgGas: number;
  minGas: number;
  maxGas: number;
  calls: number;
}

const GAS_REPORT_PATH = path.join(process.cwd(), 'gas-report.txt');
const SUMMARY_PATH = path.join(process.cwd(), 'dist', 'gas', 'gas-summary.md');

function parseGasReport(): GasFunction[] {
  if (!fs.existsSync(GAS_REPORT_PATH)) {
    console.error("‚ùå Gas report not found:", GAS_REPORT_PATH);
    return [];
  }
  
  const report = fs.readFileSync(GAS_REPORT_PATH, 'utf8');
  const lines = report.split('\n');
  const functions: GasFunction[] = [];
  
  for (const line of lines) {
    // Detect contract headers
    if (line.includes('¬∑') && !line.includes('Contract') && !line.includes('Method')) {
      const parts = line.split('¬∑').map(p => p.trim());
      if (parts.length >= 5 && parts[0] && parts[1] && !isNaN(parseInt(parts[4]))) {
        const avgGas = parseInt(parts[4]);
        const minGas = parseInt(parts[2]);
        const maxGas = parseInt(parts[3]);
        const calls = parseInt(parts[5]);
        
        if (avgGas > 0) {
          functions.push({
            contract: parts[0],
            method: parts[1],
            avgGas,
            minGas,
            maxGas,
            calls
          });
        }
      }
    }
  }
  
  return functions;
}

function generateSummary(functions: GasFunction[]): string {
  if (functions.length === 0) {
    return `# Gas Usage Summary

*No gas data available*

Generated on: ${new Date().toISOString()}
`;
  }
  
  // Sort by average gas usage (descending)
  const sortedFunctions = functions.sort((a, b) => b.avgGas - a.avgGas);
  
  // Get top 10 functions
  const topFunctions = sortedFunctions.slice(0, 10);
  
  // Calculate totals
  const totalGas = functions.reduce((sum, f) => sum + f.avgGas, 0);
  const avgGas = totalGas / functions.length;
  
  let markdown = `# Gas Usage Summary

Generated on: ${new Date().toISOString()}

## üìä Overview

- **Total Functions**: ${functions.length}
- **Average Gas**: ${avgGas.toLocaleString()}
- **Total Gas**: ${totalGas.toLocaleString()}

## üîù Top 10 Functions by Gas Usage

| Rank | Contract | Method | Avg Gas | Min | Max | Calls |
|------|----------|--------|---------|-----|-----|-------|
`;

  topFunctions.forEach((func, index) => {
    markdown += `| ${index + 1} | ${func.contract} | ${func.method} | ${func.avgGas.toLocaleString()} | ${func.minGas.toLocaleString()} | ${func.maxGas.toLocaleString()} | ${func.calls} |\n`;
  });
  
  markdown += `
## üìà Gas Distribution

### By Contract
`;

  // Group by contract
  const contractTotals = new Map<string, number>();
  functions.forEach(func => {
    const current = contractTotals.get(func.contract) || 0;
    contractTotals.set(func.contract, current + func.avgGas);
  });
  
  const sortedContracts = Array.from(contractTotals.entries())
    .sort((a, b) => b[1] - a[1]);
  
  sortedContracts.forEach(([contract, totalGas]) => {
    const percentage = ((totalGas / totalGas) * 100).toFixed(1);
    markdown += `- **${contract}**: ${totalGas.toLocaleString()} gas (${percentage}%)\n`;
  });
  
  markdown += `
## üéØ Recommendations

- Monitor high-gas functions for optimization opportunities
- Consider batching operations for frequently called functions
- Review gas usage trends over time

---

*Generated by gas summary tool*
`;
  
  return markdown;
}

function main(): void {
  console.log("üìä Generating gas usage summary...");
  
  const functions = parseGasReport();
  if (functions.length === 0) {
    console.warn("‚ö†Ô∏è  No gas data found");
    return;
  }
  
  const summary = generateSummary(functions);
  
  // Ensure directory exists
  const summaryDir = path.dirname(SUMMARY_PATH);
  if (!fs.existsSync(summaryDir)) {
    fs.mkdirSync(summaryDir, { recursive: true });
  }
  
  fs.writeFileSync(SUMMARY_PATH, summary);
  console.log(`‚úÖ Gas summary generated: ${SUMMARY_PATH}`);
  console.log(`üìà Functions analyzed: ${functions.length}`);
  console.log(`üîù Top function: ${functions[0].contract}.${functions[0].method} (${functions[0].avgGas.toLocaleString()} gas)`);
}

main();
